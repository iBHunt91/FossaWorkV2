// Re-export all functions from the notifications/pushoverService.js file
export {
  sendPushoverNotification,
  sendScheduleChangePushover,
  sendTestPushoverNotification,
  sendSampleJobPushover,
  sendAlertPushover,
  createPushoverParams
} from '../notifications/pushoverService.js.bak';

// Import needed modules for getUserPushoverSettings
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load environment variables from .env file for backward compatibility
let envVars = {};
try {
  const envPath = path.join(__dirname, '../../.env');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envVars = envContent.split('\n').reduce((acc, line) => {
      const [key, value] = line.split('=');
      if (key && value) {
        acc[key] = value;
      }
      return acc;
    }, {});
  }
} catch (err) {
  console.error('Error loading .env file:', err);
}

/**
 * Get user pushover settings from user file
 * @returns {Object} The user's pushover settings
 */
export function getUserPushoverSettings() {
  try {
    // Resolve the file path
    const userDir = path.join(__dirname, '../../data/user');
    const settingsPath = path.join(userDir, 'pushover_settings.json');
    
    if (!fs.existsSync(settingsPath)) {
      // Fall back to environment variables
      return {
        appToken: process.env.PUSHOVER_APP_TOKEN || envVars.PUSHOVER_APP_TOKEN || '',
        userKey: process.env.PUSHOVER_USER_KEY || envVars.PUSHOVER_USER_KEY || '',
        preferences: {
          showJobId: process.env.PUSHOVER_SHOW_JOB_ID !== 'false',
          showStoreNumber: process.env.PUSHOVER_SHOW_STORE_NUMBER !== 'false',
          showStoreName: process.env.PUSHOVER_SHOW_STORE_NAME !== 'false',
          showLocation: process.env.PUSHOVER_SHOW_LOCATION !== 'false',
          showDate: process.env.PUSHOVER_SHOW_DATE !== 'false',
          showDispensers: process.env.PUSHOVER_SHOW_DISPENSERS !== 'false',
          priorityLevel: process.env.PUSHOVER_PRIORITY_LEVEL || 'normal',
          sound: process.env.PUSHOVER_SOUND || 'pushover'
        }
      };
    }
    
    try {
      const data = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));
      return {
        appToken: data.appToken || process.env.PUSHOVER_APP_TOKEN || '',
        userKey: data.userKey || process.env.PUSHOVER_USER_KEY || '',
        preferences: {
          showJobId: data.preferences?.showJobId !== false,
          showStoreNumber: data.preferences?.showStoreNumber !== false,
          showStoreName: data.preferences?.showStoreName !== false,
          showLocation: data.preferences?.showLocation !== false,
          showDate: data.preferences?.showDate !== false,
          showDispensers: data.preferences?.showDispensers !== false,
          priorityLevel: data.preferences?.priorityLevel || 'normal',
          sound: data.preferences?.sound || 'pushover'
        }
      };
    } catch (error) {
      console.error('Error reading user pushover settings:', error);
      // Fall back to environment variables
      return {
        appToken: process.env.PUSHOVER_APP_TOKEN || envVars.PUSHOVER_APP_TOKEN || '',
        userKey: process.env.PUSHOVER_USER_KEY || envVars.PUSHOVER_USER_KEY || '',
        preferences: {
          showJobId: process.env.PUSHOVER_SHOW_JOB_ID !== 'false',
          showStoreNumber: process.env.PUSHOVER_SHOW_STORE_NUMBER !== 'false',
          showStoreName: process.env.PUSHOVER_SHOW_STORE_NAME !== 'false',
          showLocation: process.env.PUSHOVER_SHOW_LOCATION !== 'false',
          showDate: process.env.PUSHOVER_SHOW_DATE !== 'false',
          showDispensers: process.env.PUSHOVER_SHOW_DISPENSERS !== 'false',
          priorityLevel: process.env.PUSHOVER_PRIORITY_LEVEL || 'normal',
          sound: process.env.PUSHOVER_SOUND || 'pushover'
        }
      };
    }
  } catch (error) {
    console.error('Error getting user pushover settings:', error);
    // Provide default values if anything goes wrong
    return {
      appToken: '',
      userKey: '',
      preferences: {
        showJobId: true,
        showStoreNumber: true,
        showStoreName: true,
        showLocation: true,
        showDate: true,
        showDispensers: true,
        priorityLevel: 'normal',
        sound: 'pushover'
      }
    };
  }
} 