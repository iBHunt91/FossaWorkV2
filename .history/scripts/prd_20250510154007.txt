# Product Requirements Document: Batch Visit Form Prep Enhancement

## 1. Introduction

Fossa Monitor is a desktop application designed to automate the monitoring of work orders from the "Fossa" platform, detect schedule changes, and automate related form-filling tasks. This document outlines the requirements for enhancing the existing "Form Prep" feature by implementing robust **Batch Visit processing functionality**. This enhancement aims to improve efficiency for field technicians by allowing them to process multiple work order visits simultaneously.

## 2. Goals/Objectives

*   To enable users to process forms for multiple work order visits in a single batch operation.
*   To provide clear, real-time feedback on the progress of individual visits and the overall batch.
*   To handle errors gracefully for individual visits without halting the entire batch process.
*   To allow users to stop a batch process and receive clear information about where the process was halted.
*   To maintain a user experience consistent with the existing single visit Form Prep feature.

## 3. Target Audience

*   Field technicians who are part of a close-knit team, responsible for processing work order forms via the Fossa platform.

## 4. Scope

### In Scope:

*   Batch processing of work order visits from the active user's `scraped_content.json` file.
*   Sequential processing of visits within a batch.
*   UI for initiating, monitoring, and stopping batch processes.
*   Real-time feedback:
    *   Progress of the currently processing visit (using existing dispenser/fuel grade progress bars).
    *   Overall progress of the entire batch.
    *   Real-time indication of failed visits during the batch.
*   Error handling:
    *   Logging of individual visit failures (Visit ID).
    *   Continuation of the batch despite individual visit failures.
    *   End-of-batch summary displaying successful and failed visits.
*   Configuration options:
    *   "Show Browser" during automation.
    *   Optional small delay between visits.
*   Tracking of the last successfully completed visit ID for informational purposes in case of unexpected crashes.

### Out of Scope (for this iteration):

*   Automatic resumption of an interrupted/crashed batch process (though information to manually resume will be provided).
*   Processing of JSON files other than the active user's `scraped_content.json`.
*   Advanced error analysis or automatic retries for failed visits beyond what's specified.
*   Parallel processing of visits within a batch.

## 5. User Stories

*   **US1:** As a field technician, I want to start a batch form prep process for all relevant visits from my active user's data so that I can save time compared to processing each visit individually.
*   **US2:** As a field technician, I want to see the real-time progress of the overall batch (e.g., "Visit X of Y completed") so that I know how much of the batch is left.
*   **US3:** As a field technician, I want to see the detailed progress of the individual visit currently being processed within the batch so that I understand what the automation is doing.
*   **US4:** As a field technician, I want the batch process to continue even if one or more individual visits fail so that successfully processable visits are not blocked.
*   **US5:** As a field technician, I want to be clearly informed (both during and after the batch) which specific visits (by Visit ID) failed during processing so that I can investigate and handle them manually.
*   **US6:** As a field technician, I want to be able to stop an ongoing batch process so that I can interrupt it if needed.
*   **US7:** As a field technician, when I stop a batch process, I want to know which visit it was stopped on so that I can understand where to manually check or resume from later.
*   **US8:** As a field technician, I want the option to see the browser during batch automation (like in single visit mode) for troubleshooting or confidence.

## 6. Functional Requirements

### FR1: Batch Initiation
*   **FR1.1:** The system shall allow the user to initiate a batch form prep process.
*   **FR1.2:** The input for batch processing will always be the `scraped_content.json` file associated with the currently active user. No option to select other files will be provided.

### FR2: Batch Processing Logic
*   **FR2.1:** Visits within the batch shall be processed sequentially, one after another.
*   **FR2.2:** The system should preferably use a single browser instance for processing all visits in a batch to minimize overhead.
*   **FR2.3:** A small, configurable delay (e.g., in seconds) can be introduced between processing each visit.

### FR3: Progress Feedback & UI
*   **FR3.1:** The UI shall display the progress of the individual visit currently being processed, using the existing dispenser/fuel grade progress bar mechanisms.
*   **FR3.2:** The UI shall display an overall batch progress bar, indicating, for example, "Processing visit X of Y (Z failures so far)".
*   **FR3.3:** Upon completion of the batch, a summary shall be displayed in the UI detailing the number of successful and failed visits, including the Visit IDs of those that failed.

### FR4: Error Handling
*   **FR4.1:** If an individual visit fails during batch processing (e.g., due to missing dispenser information), the system shall log the failure (including the Visit ID).
*   **FR4.2:** The batch process shall automatically continue to the next visit if an individual visit fails.
*   **FR4.3:** The UI shall update in real-time to reflect the count of failed visits as the batch progresses.

### FR5: Stop Functionality
*   **FR5.1:** The user shall be able to click a "Stop Processing" button to halt the ongoing batch.
*   **FR5.2:** Upon clicking "Stop Processing", the currently active visit automation shall be aborted immediately.
*   **FR5.3:** The system shall inform the user which visit the batch was stopped on (e.g., "Batch stopped. Was processing Visit ID: [XYZ]"). This information should be displayed as a persistent message on the Form Prep page and as a toast notification.

### FR6: Configuration
*   **FR6.1:** The existing option to "Show Browser" during automation shall apply to batch processing.
*   **FR6.2:** The system shall allow configuration of a small delay (e.g., 0-5 seconds) between the completion of one visit and the start of the next in a batch.

### FR7: Crash Information
*   **FR7.1:** The system should internally track and log the Visit ID of the last successfully *completed* visit. This information is for recovery/diagnostic purposes if the application crashes or closes unexpectedly during a batch.

## 7. Non-Functional Requirements

*   **NFR1: Performance:** Processing a visit as part of a batch should not be significantly slower (e.g., no more than 10-15% longer) than processing it individually, excluding any intentionally configured delays between visits. Minimal setup/teardown between visits is expected.
*   **NFR2: Reliability:** The batch processing should be robust. Failures in individual visits should not crash or destabilize the overall batch process or application.
*   **NFR3: Usability:** The UI for batch processing should be intuitive and provide clear, actionable feedback to the user.
*   **NFR4: Scalability:** The system should comfortably handle batches of up to 40-50 visits for a typical user session.

## 8. UI/UX Considerations

*   A new section or clear indicators within the existing Form Prep page will be needed for batch mode.
*   Overall batch progress bar should be prominently displayed during batch processing.
*   Individual visit progress (dispensers/grades) should remain visible and update for the current visit.
*   Clear visual distinction for successfully completed visits vs. failed visits in any real-time list or final summary.
*   The "Stop Processing" button should be easily accessible during batch mode.
*   Error messages and summaries should be user-friendly.

## 9. Error Handling (Summary)

*   **Individual Visit Failure:** Log Visit ID, update failure count in UI, continue batch. Primary expected cause: missing dispenser data in JSON.
*   **Batch Stopped by User:** Abort current visit, log where it stopped, notify user.
*   **Application Crash/Unexpected Close:** Log last successfully completed Visit ID internally if possible (for developer diagnosis/manual user recovery).

## 10. Success Metrics / Definition of Done

The Batch Visit Form Prep Enhancement will be considered complete and successful when:

*   Users can reliably initiate and run a batch process for visits from their active user's data.
*   All visits in a batch are processed sequentially, with forms accurately completed where underlying data permits.
*   The UI provides accurate real-time visual feedback for individual visit progress, overall batch progress, and failure counts.
*   The system gracefully handles individual visit failures by logging them and continuing the batch.
*   Users can stop a batch process and are informed of where it was halted.
*   A clear summary of successful and failed (with Visit IDs) visits is provided upon batch completion or stoppage.
*   The performance per visit in batch mode is comparable to single visit mode.
*   The feature handles batches of up to 40-50 visits smoothly.

## 11. Future Considerations

*   **Resume Functionality:** Implement a feature to allow users to resume an interrupted (stopped or crashed) batch process from the last known point.
*   **Advanced Error Reporting:** Provide more detailed reasons for individual visit failures in the summary.
*   **Selective Batching:** Allow users to select specific visits from their `scraped_content.json` to include in a batch, rather than processing all.
*   **Post-Batch Actions:** Options to automatically perform actions on successfully processed visits (e.g., mark as prepped in a local database). 