{
  "permissions": {
    "allow": [
      "Bash(node:*)",
      "Bash(mv:*)",
      "Bash(grep:*)",
      "Bash(claude mcp:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(find:*)",
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "mcp__desktop-commander__list_directory",
      "mcp__desktop-commander__create_directory",
      "Bash(npm run dev:*)",
      "Bash(npm start)",
      "mcp__desktop-commander__search_code",
      "mcp__desktop-commander__read_file",
      "Bash(npx tsc:*)",
      "Bash(ls:*)",
      "mcp__desktop-commander__edit_block",
      "mcp__desktop-commander__execute_command",
      "mcp__desktop-commander__write_file",
      "Bash(python3:*)",
      "Bash(ss:*)",
      "Bash(rm:*)",
      "mcp__desktop-commander__read_multiple_files",
      "Bash(rg:*)",
      "Bash(# Check if the backup folders exist\nbackup_folders=(\n  \"/mnt/c/Users/Bruce/Desktop/FossaWork/backup\"\n  \"/mnt/c/Users/Bruce/Desktop/FossaWork/src/backups\"\n  \"/mnt/c/Users/Bruce/Desktop/FossaWork/src/pages/backup\"\n  \"/mnt/c/Users/Bruce/Desktop/FossaWork/server/form-automation/backup\"\n)\n\nfor folder in \"${backup_folders[@]}\"; do\n  if [ -d \"$folder\" ]; then\n    mkdir -p \"/mnt/c/Users/Bruce/Desktop/FossaWork/archive/backup_folders/$(basename \"$folder\")\"\n    cp -r \"$folder\"/* \"/mnt/c/Users/Bruce/Desktop/FossaWork/archive/backup_folders/$(basename \"$folder\")\"\n    echo \"Copied: $folder contents to archive\"\n    # We'll just copy rather than move to avoid potential issues\n  else\n    echo \"Not found: $folder\"\n  fi\ndone)",
      "Bash(if [ -f \"/mnt/c/Users/Bruce/Desktop/FossaWork/docs/VITE-FIX-README.md\" ])",
      "Bash([ -f \"/mnt/c/Users/Bruce/Desktop/FossaWork/VITE-FIX-README.md\" ])",
      "Bash(then)",
      "Bash(fi)",
      "Bash(npm install:*)",
      "Bash(tar:*)",
      "mcp__desktop-commander__read_output",
      "mcp__clear-thought__sequentialthinking",
      "Bash(cat:*)",
      "Bash(npm test)",
      "Bash(curl:*)",
      "Bash(touch:*)",
      "Bash(touch:*)",
      "Bash(pm2 start:*)",
      "Bash(cp:*)",
      "Bash(pm2 status:*)",
      "Bash(pm2 logs:*)",
      "Bash(sed:*)",
      "Bash(pm2 stop:*)",
      "Bash(pm2 delete:*)",
      "Bash(npm ls:*)",
      "Bash(npm run lint)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run:*)",
      "Bash(tsc --noEmit --project tsconfig.json)",
      "Bash(tsc:*)",
      "Bash(npm run lint)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run:*)",
      "Bash(pkill:*)",
      "Bash(npm run lint)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run:*)",
      "Bash(npx eslint:*)",
      "Bash(npx playwright:*)",
      "Bash(sudo npx playwright:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(chmod:*)",
      "Bash(bash:*)",
      "Bash(PLAYWRIGHT_BROWSERS_PATH=~/playwright-browsers npx playwright install chromium)",
      "Bash(PLAYWRIGHT_BROWSERS_PATH=/home/bruce/playwright-browsers npm run server:restart)",
      "WebFetch(domain:localhost)",
      "Bash(pm2 restart:*)",
      "Bash(pm2 list:*)",
      "Bash(jq:*)",
      "Bash(npx pm2 start:*)",
      "Bash(npx pm2 logs:*)",
      "Bash(crontab:*)",
      "Bash(systemctl:*)",
      "mcp__desktop-commander__list_processes",
      "Bash(pgrep:*)",
      "mcp__desktop-commander__list_sessions",
      "Bash(awk:*)",
      "Bash(true)",
      "Bash(kill:*)",
      "Bash(egrep:*)",
      "Bash(apt list:*)",
      "Bash(sudo apt-get:*)",
      "Bash(sudo apt-get install:*)",
      "Bash(./run-claude.sh)",
      "Bash(export PATH=$PATH:/mnt/c/Windows/System32)",
      "Bash(ls:*)",
      "Bash(npm run server:*)",
      "mcp__context7-mcp__resolve-library-id",
      "mcp__context7-mcp__get-library-docs",
      "Bash(cp:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(find:*)",
      "Bash(rm:*)",
      "Bash(npm ci:*)",
      "Bash(cmd.exe /c npm run fix-vite-cache)",
      "Bash(export NODE_OPTIONS=\"\"--max-old-space-size=4096\"\")",
      "Bash(npm create:*)",
      "Bash(grep:*)",
      "Bash(npm run test:*)",
      "Bash(node:*)",
      "Bash(./tests/wsl-test-form.sh:*)",
      "Bash(./tests/form-automation/run-real-site-test.sh:*)",
      "Bash(timeout:*)",
      "Bash(PLAYWRIGHT_BROWSERS_PATH=/home/bruce/.cache/ms-playwright npx playwright install chromium)",
      "Bash(npm --version)",
      "Bash(claude --version)",
      "Bash(PLAYWRIGHT_BROWSERS_PATH=/mnt/c/Users/Bruce/AppData/Local/ms-playwright npx playwright install chromium)",
      "Bash(env)",
      "Bash(/home/bruce/.npm-global/bin/mcp-server-playwright --help)",
      "mcp__toolbox__search_servers",
      "mcp__memory-bank-mcp__memory_bank_write",
      "Bash(git reset:*)",
      "Bash(echo:*)",
      "Bash(mcp:*)",
      "Bash(/mnt/c/Windows/System32/cmd.exe /c \"npx -y @smithery/cli@latest run @waldzellai/clear-thought --key 42b1a0d8-bc6b-4340-b082-e92bdc0cd62b --version\")",
      "Bash(/mnt/c/Windows/System32/cmd.exe /c \"npx --version\")",
      "Bash(/home/bruce/.config/claude-cli-nodejs/run-windows-mcp.sh /c \"npx --version\")",
      "Bash(/mnt/c/Windows/System32/cmd.exe /c \"cd /d C:\\Users\\Bruce && npx --version\")",
      "Bash(/mnt/c/Windows/System32/cmd.exe /c \"cd /d C:\\Users\\Bruce && echo Working from: && cd\")",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg \"jobStateManager\\.createJob|const jobId|let finalJobId\" server/form-automation/AutomateForm.js)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"jobStateManager|createJob\" server/form-automation/AutomateForm.js)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"/api/job-state/\" src/)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"automation.*complete|FormProcessor.*complete\" server/form-automation/AutomateForm.js)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"browser.*close|page.*close|context.*close\" server/form-automation/FormProcessor.js)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"cleanup\\(\\)\" server/form-automation/FormProcessor.js)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -A 20 -B 5 \"Form automation completed successfully\" server/form-automation/FormProcessor.js)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -A 10 -B 5 \"return.*success.*true\" server/form-automation/FormProcessor.js)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg \"single_1748138170816_7218\" logs/server/server.log)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"Job state manager not available\" server/)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -A 10 -B 5 \"fill.*email|type.*email\" server/form-automation/FormProcessor.js)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"processFormAutomation\" server/form-automation/FormProcessor.js)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"emitProgress|emit.*progress\" server/form-automation/FormProcessor.js)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"form.*creat|dispenser.*assign|Creating.*form\" server/form-automation/accumeasure-form-handler-enhanced.js)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrip/x64-linux/rg -A 10 -B 5 \"Creating.*form\\|Attach.*form\\|dispenser.*assign\" server/form-automation/)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -A 10 -B 5 \"Creating.*form\\|Attach.*form\\|dispenser.*assign\" server/form-automation/)",
      "Bash(/home/bruce/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"setOptimalViewportForGrade|PROACTIVE VIEWPORT\" tests/form-automation/test-complete-grade-workflow.js)",
      "WebFetch(domain:app.workfossa.com)",
      "mcp__filesystem__directory_tree",
      "mcp__filesystem__read_multiple_files",
      "mcp__filesystem__read_file",
      "mcp__server-sequential-thinking__sequentialthinking",
      "mcp__filesystem__list_directory"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}