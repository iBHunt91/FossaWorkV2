# FossaWork V2 Kubernetes Ingress Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fossawork-ingress
  namespace: fossawork
  labels:
    app: fossawork
  annotations:
    # Ingress Controller
    kubernetes.io/ingress.class: "nginx"
    
    # SSL/TLS Configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Permissions-Policy: geolocation=(), microphone=(), camera=()";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss://app.fossawork.com; frame-ancestors 'none'; base-uri 'self'; form-action 'self';";
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-connections: "10"
    nginx.ingress.kubernetes.io/limit-whitelist: "10.0.0.0/8,172.16.0.0/12"
    
    # Body Size Limits
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "1m"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    
    # WebSocket Support
    nginx.ingress.kubernetes.io/websocket-services: "fossawork-backend"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    
    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.fossawork.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    
    # WAF Rules
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecRequestBodyAccess On
      SecResponseBodyAccess On
      SecRequestBodyLimit 52428800
      SecRequestBodyNoFilesLimit 1048576
      SecAuditEngine RelevantOnly
      SecAuditLog /var/log/modsec/audit.log
spec:
  tls:
  - hosts:
    - app.fossawork.com
    - api.fossawork.com
    secretName: fossawork-tls
  rules:
  # Main application
  - host: app.fossawork.com
    http:
      paths:
      # Frontend routes
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fossawork-frontend
            port:
              number: 80
      # API routes
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: fossawork-backend
            port:
              number: 8000
      # WebSocket routes
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: fossawork-backend
            port:
              number: 8000
  # API subdomain
  - host: api.fossawork.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fossawork-backend
            port:
              number: 8000
---
# Staging Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fossawork-ingress-staging
  namespace: fossawork-staging
  labels:
    app: fossawork
    environment: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # Basic Auth for staging
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: staging-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "FossaWork Staging"
    
    # Whitelist for staging
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
spec:
  tls:
  - hosts:
    - staging.fossawork.com
    secretName: fossawork-staging-tls
  rules:
  - host: staging.fossawork.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fossawork-frontend
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: fossawork-backend
            port:
              number: 8000
---
# Monitoring Ingress (Internal)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fossawork-monitoring-ingress
  namespace: fossawork
  labels:
    app: fossawork
    component: monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx-internal"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-basic-auth
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8"
spec:
  tls:
  - hosts:
    - monitoring.fossawork.internal
    secretName: fossawork-monitoring-tls
  rules:
  - host: monitoring.fossawork.internal
    http:
      paths:
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
      - path: /kibana
        pathType: Prefix
        backend:
          service:
            name: kibana
            port:
              number: 5601