# FossaWork V2 Docker Compose Configuration
# Base configuration for all environments

version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fossawork_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: fossawork
      POSTGRES_USER: ${DB_USER:-fossawork}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-fossawork}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fossawork_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fossawork_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fossawork_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # FastAPI Backend
  backend:
    build:
      context: ../../backend
      dockerfile: ../config/docker/Dockerfile.backend
      args:
        - PYTHON_VERSION=3.11
    container_name: fossawork_backend
    restart: unless-stopped
    env_file:
      - ../../backend/.env
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-fossawork}:${DB_PASSWORD}@postgres:5432/fossawork
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - ../../backend/app:/app/app:ro
      - backend_data:/app/data
      - backend_logs:/app/logs
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fossawork_network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  # React Frontend
  frontend:
    build:
      context: ../../frontend
      dockerfile: ../config/docker/Dockerfile.frontend
      args:
        - NODE_VERSION=20
    container_name: fossawork_frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://backend:8000
      - NODE_ENV=production
    volumes:
      - frontend_static:/app/dist
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fossawork_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fossawork_nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - frontend_static:/usr/share/nginx/html:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fossawork_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Playwright Browser Service (Optional)
  playwright:
    build:
      context: .
      dockerfile: Dockerfile.playwright
    container_name: fossawork_playwright
    restart: unless-stopped
    environment:
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
    volumes:
      - playwright_cache:/ms-playwright
    networks:
      - fossawork_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    profiles:
      - automation

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_data:
    driver: local
  backend_logs:
    driver: local
  frontend_static:
    driver: local
  nginx_logs:
    driver: local
  playwright_cache:
    driver: local

networks:
  fossawork_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16