import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { 
  FiFilter, 
  FiCalendar, 
  FiChevronLeft, 
  FiChevronRight, 
  FiSearch, 
  FiDownload, 
  FiArrowUp, 
  FiArrowDown, 
  FiInfo, 
  FiExternalLink, 
  FiMapPin, 
  FiClock, 
  FiTool, 
  FiGrid, 
  FiEye,
  FiAlertCircle,
  FiPrinter, 
  FiCheck, 
  FiBox, 
  FiLayers, 
  FiAlertTriangle,
  FiRefreshCw,
  FiBarChart2,
  FiCheckCircle
} from 'react-icons/fi';
import { CSVLink } from 'react-csv';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import scrapedData from '../../data/scraped_content.json';
import DispenserInfo from '../components/DispenserInfo';
import { WorkOrder, FilterNeed } from '../types';
import { calculateFiltersForWorkOrder, FilterWarning } from '../utils/filterCalculation';
import { useTheme } from '../context/ThemeContext';
import { useToast } from '../context/ToastContext';
import { useDispenserData } from '../context/DispenserContext';
import { format, startOfWeek as dateStartOfWeek, endOfWeek as dateEndOfWeek, subDays, addDays } from 'date-fns';

// Add custom styles for the date picker
import "./datePickerStyles.css";

// FilterDataType interface definition
interface FilterDataType {
  id: string;
  type: 'GAS' | 'DIESEL';
  quantity: number;
  visitDate: Date;
  store: string;
  visitId: string;
}

// Extended FilterNeed interface with additional properties we need
interface ExtendedFilterNeed extends FilterNeed {
  orderId: string;
  visitId: string;
  visitDate: string;
  storeName: string;
  filterType?: string;
}

// Extended FilterWarning interface with additional properties we need
interface ExtendedFilterWarning extends FilterWarning {
  partNumber?: string;
  message?: string;
  severity?: number;
  orderId?: string;
  storeName?: string;
}

// Define types for CSV data
interface CSVFilterSummary {
  'Part Number': string;
  'Type': string;
  'Quantity': number | string;
  'Boxes Needed': number | string;
  'Stores': string;
  'Warnings'?: string;
  'Visit ID'?: string;
  'Date'?: string;
}

// Extended Dispenser interface
interface Dispenser {
  title: string;
  serial?: string;
  make?: string;
  model?: string;
  fields?: Record<string, string>;
  html?: string;
}

// Station-specific filter part numbers
const STATION_FILTERS = {
  '7-Eleven': {
    GAS: {
      'Electronic': '400MB-10',
      'HD Meter': '400MB-10',
      'Ecometer': '40510A-AD',
      'default': '400MB-10'
    },
    DIESEL: {
      'Electronic': '400HS-10',
      'HD Meter': '400HS-10',
      'Ecometer': '40510W-AD',
      'default': '400HS-10'
    },
    DEF: '800HS-30' // Add DEF filter type for 7-Eleven
  },
  'Wawa': {
    GAS: '450MB-10',
    DIESEL: '450MG-10'
  },
  'Circle K': {
    GAS: '40510D-AD',
    DIESEL: '40530W-AD'
  }
};

const FiltersRedesign: React.FC = () => {
  const { isDarkMode } = useTheme();
  const { addToast } = useToast();
  const { dispenserData, loadDispenserData, isLoaded } = useDispenserData();
  const [workOrders, setWorkOrders] = useState<WorkOrder[]>(scrapedData.workOrders);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [filterNeeds, setFilterNeeds] = useState<ExtendedFilterNeed[]>([]);
  const [filterWarnings, setFilterWarnings] = useState<Map<string, ExtendedFilterWarning[]>>(new Map());
  const [currentWeek, setCurrentWeek] = useState<Date>(new Date());
  const [searchTerm, setSearchTerm] = useState('');
  const [sortConfig, setSortConfig] = useState<{ key: 'visitId' | 'store' | 'date'; direction: 'asc' | 'desc' } | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;
  const [dispenserToastShown, setDispenserToastShown] = useState(() => {
    return sessionStorage.getItem('dispenserToastShown') === 'true';
  });
  
  // Dispenser Modal States
  const [currentDispenserInfo, setCurrentDispenserInfo] = useState<string | null>(null);
  const [selectedOrderId, setSelectedOrderId] = useState<string | null>(null);
  const [currentDispenserData, setCurrentDispenserData] = useState<any[]>([]);
  const [hasDispenserInfo, setHasDispenserInfo] = useState(false);
  
  // Filter Type Selection
  const [selectedFilterType, setSelectedFilterType] = useState<string | null>(null);
  
  // Visualization
  const [showVisualization, setShowVisualization] = useState(false);

  // State variables
  const [filters, setFilters] = useState<FilterDataType[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  
  // Update selectedDateRange to use Monday-Friday instead of Monday-Sunday
  const [selectedDateRange, setSelectedDateRange] = useState<[Date, Date]>(() => {
    const today = new Date();
    const day = today.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
    
    // Calculate Monday
    const mondayOffset = day === 0 ? -6 : 1 - day; // If Sunday, go back 6 days, otherwise calculate days until Monday
    const monday = new Date(today);
    monday.setDate(today.getDate() + mondayOffset);
    monday.setHours(0, 0, 0, 0);
    
    // Calculate Friday
    const friday = new Date(monday);
    friday.setDate(monday.getDate() + 4); // Friday is 4 days after Monday
    friday.setHours(17, 0, 0, 0); // End at 5:00pm
    
    return [monday, friday];
  });
  
  const [dispenserInfoOpen, setDispenserInfoOpen] = useState<boolean>(false);
  const [selectedDispensers, setSelectedDispensers] = useState<string>('');
  const [dispenserHtml, setDispenserHtml] = useState<string>('');
  
  // Context for date format
  const dateFormat = "MMM d";
  const fullDateFormat = "MMM d, yyyy";
  
  // Format a range of dates for display
  const formatDateRange = (dateRange: [Date, Date]) => {
    // Get month and day for start and end dates
    const startMonth = dateRange[0].toLocaleDateString('en-US', { month: 'short' });
    const startDay = dateRange[0].getDate();
    const endMonth = dateRange[1].toLocaleDateString('en-US', { month: 'short' });
    const endDay = dateRange[1].getDate();
    const endYear = dateRange[1].getFullYear();
    
    // Different formats based on whether the month is the same
    if (startMonth === endMonth) {
      return `${startMonth} ${startDay} - ${endDay}`;
    } else {
      return `${startMonth} ${startDay} - ${endMonth} ${endDay}`;
    }
  };
  
  // Week navigation functions
  const handlePreviousWeek = () => {
    setSelectedDateRange(([start, end]) => {
      const newStart = new Date(start);
      newStart.setDate(start.getDate() - 7);
      
      const newEnd = new Date(end);
      newEnd.setDate(end.getDate() - 7);
      // Ensure end time is 5:00pm
      newEnd.setHours(17, 0, 0, 0);
      
      return [newStart, newEnd];
    });
  };
  
  const handleNextWeek = () => {
    setSelectedDateRange(([start, end]) => {
      const newStart = new Date(start);
      newStart.setDate(start.getDate() + 7);
      
      const newEnd = new Date(end);
      newEnd.setDate(end.getDate() + 7);
      // Ensure end time is 5:00pm
      newEnd.setHours(17, 0, 0, 0);
      
      return [newStart, newEnd];
    });
  };
  
  const goToCurrentWeek = () => {
    const today = new Date();
    const day = today.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
    const currentHour = today.getHours();
    
    // Check if it's Friday after 5:00pm, Saturday, or Sunday (weekend mode)
    const isWeekend = (day === 5 && currentHour >= 17) || day === 6 || day === 0;
    
    if (isWeekend) {
      // If in weekend mode, show next week's Monday-Friday
      // Calculate days to next Monday
      const daysToNextMonday = day === 0 ? 1 : 8 - day; // Sunday: 1 day, Saturday: 2 days, Friday after 5pm: 3 days
      
      // Set to next Monday
      const nextMonday = new Date(today);
      nextMonday.setDate(today.getDate() + daysToNextMonday);
      nextMonday.setHours(0, 0, 0, 0);
      
      // Calculate next Friday (4 days after Monday)
      const nextFriday = new Date(nextMonday);
      nextFriday.setDate(nextMonday.getDate() + 4);
      nextFriday.setHours(17, 0, 0, 0);
      
      // Update the date range
      setSelectedDateRange([nextMonday, nextFriday]);
      setCurrentWeek(nextMonday);
    } else {
      // Regular weekday mode - show current week's Monday-Friday
      // Calculate Monday
      const mondayOffset = day === 0 ? -6 : 1 - day; // If Sunday, go back 6 days, otherwise calculate days until Monday
      const monday = new Date(today);
      monday.setDate(today.getDate() + mondayOffset);
      monday.setHours(0, 0, 0, 0);
      
      // Calculate Friday
      const friday = new Date(monday);
      friday.setDate(monday.getDate() + 4); // Friday is 4 days after Monday
      friday.setHours(17, 0, 0, 0); // End at 5:00pm
      
      setSelectedDateRange([monday, friday]);
      setCurrentWeek(monday);
    }
  };

  // Main useEffect for loading data
  useEffect(() => {
    let isMounted = true;
    
    const loadData = async () => {
      setIsLoading(true);
      
      try {
        // First load the main data file from local JSON, not API
        const mainResponse = await fetch('/data/scraped_content.json');
        if (!mainResponse.ok) {
          throw new Error(`Failed to load work orders: ${mainResponse.status}`);
        }
        
        const mainData = await mainResponse.json();
        console.log('Loaded main data with', mainData.workOrders.length, 'work orders');
        
        // Load dispenser data if not already loaded
        if (!isLoaded) {
          await loadDispenserData();
        }
        
        // Merge the data
        const enhancedWorkOrders = mainData.workOrders.map((order: WorkOrder) => {
          // If order already has dispenser data, use it
          if (order.dispensers && order.dispensers.length > 0) {
            return order;
          }
          
          // If dispenser data exists in the store, add it to the order
          if (dispenserData.dispenserData && dispenserData.dispenserData[order.id]) {
            const dispenserInfo = dispenserData.dispenserData[order.id] as { dispensers: Dispenser[] };
            const dispensers = dispenserInfo.dispensers || [];
            return {
              ...order,
              dispensers
            };
          }
          
          // No dispenser data available
          return order;
        });
        
        // Update the state with the merged data
        if (isMounted) {
          setWorkOrders(enhancedWorkOrders);
        }
        
      } catch (error) {
        console.error('Error loading work order data:', error);
        
        // Fall back to imported data if fetch fails
        console.log('Using fallback imported data due to error');
        if (isMounted) {
          setWorkOrders(scrapedData.workOrders);
        }
      } finally {
        if (isMounted) {
          setIsLoading(false);
        }
      }
    };
    
    loadData();
    
    // Cleanup function
    return () => {
      isMounted = false;
    };
  }, [isLoaded, loadDispenserData, dispenserData]);
  
  // Separate useEffect for toast notifications
  useEffect(() => {
    // Only show toast if it hasn't been shown yet during this session
    if (!dispenserToastShown && !isLoading && workOrders.length > 0) {
      const ordersWithDispensers = workOrders.filter(
        (order) => order.dispensers && order.dispensers.length > 0
      ).length;
      
      if (ordersWithDispensers > 0) {
        addToast('success', `Loaded ${ordersWithDispensers} work orders with dispenser information`);
      } else {
        addToast('warning', 'No dispenser information found for any work orders');
      }
      
      // Mark as shown in session storage to prevent repeated notifications
      sessionStorage.setItem('dispenserToastShown', 'true');
      setDispenserToastShown(true);
    }
  }, [isLoading, workOrders, dispenserToastShown, addToast]);

  // Memoize start and end of week
  const { startOfWeek, endOfWeek, isWeekend, weekRangeText, nextWeekStart, nextWeekEnd } = useMemo(() => {
    // Get the current date
    const today = new Date();
    const dayOfWeek = today.getDay();
    const currentHour = today.getHours();
    
    // Check if today is weekend (Saturday or Sunday) or Friday after 5:00pm
    const isWeekend = dayOfWeek === 6 || dayOfWeek === 0 || (dayOfWeek === 5 && currentHour >= 17);
    
    // Create date objects for the current and next week's Monday-Friday range
    const day = today.getDay();
    const diff = today.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday
    const currentMonday = new Date(today);
    currentMonday.setDate(diff);
    currentMonday.setHours(0, 0, 0, 0);
    
    // Get the current Friday
    const currentFriday = new Date(currentMonday);
    currentFriday.setDate(currentMonday.getDate() + 4);
    currentFriday.setHours(17, 0, 0, 0); // Set to 5:00pm on Friday
    
    // Get next Monday
    const nextMonday = new Date(currentMonday);
    nextMonday.setDate(currentMonday.getDate() + 7);
    
    // Get next Friday
    const nextFriday = new Date(nextMonday);
    nextFriday.setDate(nextMonday.getDate() + 4);
    nextFriday.setHours(17, 0, 0, 0); // Set to 5:00pm on Friday
    
    // Set the actual work week based on if it's a weekend
    const thisWeekStart = isWeekend ? nextMonday : currentMonday;
    const thisWeekEnd = isWeekend ? nextFriday : currentFriday;
    const futureWeekStart = isWeekend ? new Date(nextMonday.getTime() + 7 * 24 * 60 * 60 * 1000) : nextMonday;
    const futureWeekEnd = isWeekend ? new Date(nextFriday.getTime() + 7 * 24 * 60 * 60 * 1000) : nextFriday;
    
    // Create date range text for display
    const weekRangeText = `${thisWeekStart.toLocaleDateString()} - ${thisWeekEnd.toLocaleDateString()}`;
    
    // Determine the start and end of week based on currentWeek selection
    // but respect the weekend mode
    let start, end, nextStart, nextEnd;
    
    // If the currentWeek is the current week and we're in weekend mode
    // OR if explicit dates are selected, honor the selection
    const todayYear = today.getFullYear();
    const todayMonth = today.getMonth();
    const todayDate = today.getDate();
    
    const selectedYear = currentWeek.getFullYear();
    const selectedMonth = currentWeek.getMonth();
    const selectedDate = currentWeek.getDate();
    
    const currentWeekStart = new Date(todayYear, todayMonth, todayDate - day + (day === 0 ? -6 : 1));
    const selectedWeekStart = new Date(selectedYear, selectedMonth, selectedDate - currentWeek.getDay() + (currentWeek.getDay() === 0 ? -6 : 1));
    
    // Is the currently selected week the current week?
    const isCurrentWeekSelected = currentWeekStart.getTime() === selectedWeekStart.getTime();
    
    if (isWeekend && isCurrentWeekSelected) {
      // If it's weekend and we're looking at the current week, show next week
      start = thisWeekStart;
      end = thisWeekEnd;
      nextStart = futureWeekStart;
      nextEnd = futureWeekEnd;
    } else {
      // Get the Monday of the selected week
      const weekDay = currentWeek.getDay();
      const diffToMonday = currentWeek.getDate() - weekDay + (weekDay === 0 ? -6 : 1);
      
      start = new Date(currentWeek);
      start.setDate(diffToMonday);
      start.setHours(0, 0, 0, 0);
      
      end = new Date(start);
      end.setDate(start.getDate() + 4); // Show Monday-Friday (5 days)
      end.setHours(17, 0, 0, 0); // End at 5:00pm on Friday
      
      nextStart = new Date(start);
      nextStart.setDate(start.getDate() + 7);
      
      nextEnd = new Date(end);
      nextEnd.setDate(end.getDate() + 7);
    }
    
    return { 
      startOfWeek: start, 
      endOfWeek: end, 
      isWeekend, 
      weekRangeText,
      nextWeekStart: nextStart,
      nextWeekEnd: nextEnd
    };
  }, [currentWeek]);

  // Format date for display in a compact way
  const formatShortDate = (date: Date) => {
    const options: Intl.DateTimeFormatOptions = { month: 'short', day: 'numeric' };
    return date.toLocaleDateString('en-US', options);
  };
  
  // Navigate to previous/next week
  const goToPreviousWeek = () => {
    // Update current week
    setCurrentWeek(prev => {
      const newDate = new Date(prev);
      newDate.setDate(prev.getDate() - 7);
      return newDate;
    });
    
    // Also update the selected date range
    setSelectedDateRange(([start, end]) => {
      const newStart = new Date(start);
      newStart.setDate(start.getDate() - 7);
      
      const newEnd = new Date(end);
      newEnd.setDate(end.getDate() - 7);
      // Ensure end time is 5:00pm
      newEnd.setHours(17, 0, 0, 0);
      
      return [newStart, newEnd];
    });
  };
  
  const goToNextWeek = () => {
    // Update current week
    setCurrentWeek(prev => {
      const newDate = new Date(prev);
      newDate.setDate(prev.getDate() + 7);
      return newDate;
    });
    
    // Also update the selected date range
    setSelectedDateRange(([start, end]) => {
      const newStart = new Date(start);
      newStart.setDate(start.getDate() + 7);
      
      const newEnd = new Date(end);
      newEnd.setDate(end.getDate() + 7);
      // Ensure end time is 5:00pm
      newEnd.setHours(17, 0, 0, 0);
      
      return [newStart, newEnd];
    });
  };
  
  // Format week label for the date picker
  const formatWeekLabel = (start: Date, end: Date) => {
    // Format dates like "Apr 15 - Apr 19"
    const startMonth = start.toLocaleDateString('en-US', { month: 'short' });
    const startDay = start.getDate();
    const endMonth = end.toLocaleDateString('en-US', { month: 'short' });
    const endDay = end.getDate();
    
    if (startMonth === endMonth) {
      return `${startMonth} ${startDay} - ${endDay}`;
    } else {
      return `${startMonth} ${startDay} - ${endMonth} ${endDay}`;
    }
  };
  
  // Get a formatted representation of the current work week
  const getWorkWeekLabel = (date: Date) => {
    // Calculate the Monday (start) and Friday (end) of the work week
    const day = date.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
    const diff = date.getDate() - day + (day === 0 ? -6 : 1); // Calculate how many days we need to go back to Monday
    
    const start = new Date(date);
    start.setDate(diff);
    start.setHours(0, 0, 0, 0);
    
    const end = new Date(start);
    end.setDate(start.getDate() + 4); // Friday is 4 days after Monday
    end.setHours(17, 0, 0, 0); // End at 5:00pm
    
    // Use the same format as formatDateRange for consistency
    const startMonth = start.toLocaleDateString('en-US', { month: 'short' });
    const startDay = start.getDate();
    const endMonth = end.toLocaleDateString('en-US', { month: 'short' });
    const endDay = end.getDate();
    
    if (startMonth === endMonth) {
      return `${startMonth} ${startDay} - ${endDay}`;
    } else {
      return `${startMonth} ${startDay} - ${endMonth} ${endDay}`;
    }
  };

  // Fix the useEffect that calculates filter needs
  useEffect(() => {
    // Only run when workOrders have been loaded and isLoading is false
    if (isLoading) return;

    // Process work orders and calculate filter needs
    const filteredOrders = workOrders.filter(order => {
      // Extract dates from visits
      const visits = order.visits || {};
      const visitData = Object.values(visits)[0] || {};
      const visitDateStr = visitData.date;
      
      if (!visitDateStr) return false;
      
      const visitDate = new Date(visitDateStr);
      visitDate.setHours(0, 0, 0, 0);
      
      // Use the selected date range for filtering instead of startOfWeek/endOfWeek
      // This ensures consistency between the displayed date range and filtered jobs
      return (
        (visitDate >= selectedDateRange[0] && visitDate <= selectedDateRange[1])
      );
    });
    
    // Calculate filter needs and warnings for each work order
    const needs: ExtendedFilterNeed[] = [];
    const warnings = new Map<string, ExtendedFilterWarning[]>();
    
    filteredOrders.forEach(order => {
      // Get the filter calculation result
      const { gasFilters, dieselFilters, warnings: filterWarnings } = calculateFiltersForWorkOrder(order);
      
      // Determine station type
      const stationType = order.customer.name.includes('7-Eleven') || 
                         (order.rawHtml && (order.rawHtml.includes('Speedway') || 
                                          order.rawHtml.includes('Marathon'))) ? 
                         '7-Eleven' : 
                         order.customer.name.includes('Wawa') ? 'Wawa' : 'Circle K';
      
      // Map the gas/diesel filters to the specific part numbers for this station type
      let gasFilterPart: string;
      let dieselFilterPart: string;
      
      if (stationType === '7-Eleven') {
        // For 7-Eleven/Speedway/Marathon, filter depends on meter type
        const meterType = getMeterType(order);
        const meterTypeKey = meterType.includes('HD') ? 'HD Meter' : 
                             meterType.includes('Eco') ? 'Ecometer' : 'Electronic';
        
        gasFilterPart = STATION_FILTERS['7-Eleven'].GAS[meterTypeKey] || STATION_FILTERS['7-Eleven'].GAS.default;
        dieselFilterPart = STATION_FILTERS['7-Eleven'].DIESEL[meterTypeKey] || STATION_FILTERS['7-Eleven'].DIESEL.default;
        
        // Check for DEF at 7-Eleven
        const { hasDEF } = checkForSpecialFuelTypes(order);
        if (hasDEF) {
          // Extract visit information
          const visitData = Object.values(order.visits || {})[0] || {};
          const visitId = visitData.visitId || 'Unknown';
          const visitDate = visitData.date || new Date().toISOString();
          const storeName = order.customer.name || 'Unknown Store';
          
          // Add DEF filter need
          needs.push({
            partNumber: STATION_FILTERS['7-Eleven'].DEF,
            type: 'DIESEL', // Use DIESEL type since DEF is a diesel product
            quantity: 1, // Typically one DEF filter
            stores: [storeName],
            stationType,
            orderId: order.id,
            visitId,
            visitDate,
            storeName,
            filterType: 'DEF' // Mark it as DEF in the filterType field
          } as ExtendedFilterNeed);
        }
      } else if (stationType === 'Wawa') {
        // For Wawa, use standard filters
        gasFilterPart = STATION_FILTERS['Wawa'].GAS;
        dieselFilterPart = STATION_FILTERS['Wawa'].DIESEL;
      } else {
        // For Circle K, always use the same filters
        gasFilterPart = STATION_FILTERS['Circle K'].GAS;
        dieselFilterPart = STATION_FILTERS['Circle K'].DIESEL;
      }
      
      // Extract visit information
      const visitData = Object.values(order.visits || {})[0] || {};
      const visitId = visitData.visitId || 'Unknown';
      const visitDate = visitData.date || new Date().toISOString();
      const storeName = order.customer.name || 'Unknown Store';
      
      // Add gas filters if needed
      if (gasFilters > 0) {
        needs.push({
          partNumber: gasFilterPart,
          type: 'GAS',
          quantity: gasFilters,
          stores: [storeName],
          stationType,
          orderId: order.id,
          visitId,
          visitDate,
          storeName
        } as ExtendedFilterNeed);
      }
      
      // Add diesel filters if needed
      if (dieselFilters > 0) {
        needs.push({
          partNumber: dieselFilterPart,
          type: 'DIESEL',
          quantity: dieselFilters,
          stores: [storeName],
          stationType,
          orderId: order.id,
          visitId,
          visitDate,
          storeName
        } as ExtendedFilterNeed);
      }
      
      // Store warnings if any
      if (filterWarnings.length > 0) {
        // Convert to ExtendedFilterWarning
        const extendedWarnings = filterWarnings.map(warning => ({
          ...warning,
          message: warning.warning // Map warning to message
        })) as ExtendedFilterWarning[];
        warnings.set(order.id, extendedWarnings);
      }
    });
    
    setFilterNeeds(needs);
    setFilterWarnings(warnings);
  }, [workOrders, isLoading, selectedDateRange]);

  // Format date for display
  const formatDate = useCallback((date: Date) => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const isToday = date.getTime() === today.getTime();
    
    if (isToday) {
      return (
        <div className="flex flex-col">
          <span className="text-xs font-medium uppercase tracking-wider bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-400 px-2 py-0.5 rounded-full text-center">Today</span>
          <span className="text-sm mt-1 text-gray-700 dark:text-gray-300">{date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>
        </div>
      );
    }
    
    const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
    const month = date.toLocaleDateString('en-US', { month: 'short' });
    const day = date.getDate();
    
    return (
      <div className="flex flex-col">
        <span className="text-xs uppercase tracking-wider text-gray-500 dark:text-gray-400">{dayName}</span>
        <span className="text-sm font-medium text-gray-700 dark:text-gray-300">{month} {day}</span>
      </div>
    );
  }, []);

  // Handle sort
  const handleSort = (key: 'visitId' | 'store' | 'date') => {
    let direction: 'asc' | 'desc' = 'asc';
    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  // Clear filters
  const clearFilters = () => {
    setSearchTerm('');
    setSortConfig(null);
    setCurrentWeek(new Date());
    setSelectedFilterType(null);
  };

  // Get meter type for a work order
  const getMeterType = (order: WorkOrder): string => {
    // Check if the work order has a meter type listed in the instructions
    const instructions = order.instructions?.toLowerCase() || '';
    
    if (instructions.includes('electronic meter') || instructions.includes('electronics')) {
      return 'Electronic';
    } else if (instructions.includes('hd meter')) {
      return 'HD Meter';
    } else if (instructions.includes('ecometer')) {
      return 'Ecometer';
    }
    
    // If no meter type is found in instructions, check the services
    const services = order.services || [];
    for (const service of services) {
      const description = service.description?.toLowerCase() || '';
      
      if (description.includes('electronic meter')) {
        return 'Electronic';
      } else if (description.includes('hd meter')) {
        return 'HD Meter';
      } else if (description.includes('ecometer')) {
        return 'Ecometer';
      }
    }
    
    // Default to "Unknown" if meter type can't be determined
    return 'Unknown';
  };

  // Calculate total quantity for a specific filter type
  const getTotalQuantity = (partNumber: string) => {
    return filterNeeds
      .filter(need => need.partNumber === partNumber)
      .reduce((sum, need) => sum + need.quantity, 0);
  };

  // Get all unique filter types
  const getAllFilterTypes = () => {
    return [...new Set(filterNeeds.map(need => need.partNumber))];
  };

  // Calculate boxes needed for a quantity
  const getBoxesNeeded = (quantity: number) => {
    return Math.ceil(quantity / 12); // Assuming 12 filters per box
  };

  // Calculate total boxes needed
  const getTotalBoxesNeeded = () => {
    return getAllFilterTypes().reduce((sum, type) => {
      return sum + getBoxesNeeded(getTotalQuantity(type));
    }, 0);
  };

  // Get total number of filters needed
  const getTotalFiltersNeeded = () => {
    return filterNeeds.reduce((sum, need) => sum + need.quantity, 0);
  };

  // Prepare data for CSV export
  const prepareCSVData = () => {
    const csvData: CSVFilterSummary[] = [];
    
    // Group by part number
    const groupedByPartNumber = new Map<string, ExtendedFilterNeed[]>();
    
    filterNeeds.forEach(need => {
      if (!groupedByPartNumber.has(need.partNumber)) {
        groupedByPartNumber.set(need.partNumber, []);
      }
      groupedByPartNumber.get(need.partNumber)?.push(need);
    });
    
    // Convert groups to CSV rows
    groupedByPartNumber.forEach((needs, partNumber) => {
      const totalQuantity = needs.reduce((sum, need) => sum + need.quantity, 0);
      const boxesNeeded = getBoxesNeeded(totalQuantity);
      
      // Get unique stores for this part number
      const stores = [...new Set(needs.map(need => need.storeName))].join(', ');
      
      // Collect warnings for this part number
      const allWarnings: string[] = [];
      needs.forEach(need => {
        const orderWarnings = filterWarnings.get(need.orderId);
        if (orderWarnings) {
          orderWarnings.forEach(warning => {
            const warningMessage = warning.message || warning.warning;
            if ((warning.partNumber === partNumber || !warning.partNumber) && warningMessage) {
              allWarnings.push(`${warningMessage} (${need.storeName})`);
            }
          });
        }
      });
      
      csvData.push({
        'Part Number': partNumber,
        'Type': needs[0]?.filterType || needs[0]?.type || 'Unknown',
        'Quantity': totalQuantity,
        'Boxes Needed': boxesNeeded,
        'Stores': stores,
        'Warnings': allWarnings.join('; ')
      });
    });
    
    // Add individual order filter needs
    filterNeeds.forEach(need => {
      const visitId = need.visitId || 'Unknown';
      const orderWarnings = filterWarnings.get(need.orderId) || [];
      const relevantWarnings = orderWarnings
        .filter(warning => warning.partNumber === need.partNumber || !warning.partNumber)
        .map(warning => warning.message || warning.warning)
        .filter(Boolean) // Remove any undefined values
        .join('; ');
      
      csvData.push({
        'Part Number': need.partNumber,
        'Type': need.filterType || need.type,
        'Quantity': need.quantity,
        'Boxes Needed': getBoxesNeeded(need.quantity),
        'Stores': need.storeName,
        'Warnings': relevantWarnings,
        'Visit ID': visitId,
        'Date': need.visitDate
      });
    });
    
    return csvData;
  };

  // Render weekly summary cards
  const renderWeeklySummaryCards = () => {
    const filterTypes = getAllFilterTypes();
    const totalBoxes = getTotalBoxesNeeded();
    const totalFilters = getTotalFiltersNeeded();
    const warningsCount = Array.from(filterWarnings.values()).reduce((count, arr) => count + arr.length, 0);
    
    // Calculate filter efficiency (this is a simplified example)
    const totalStores = new Set(filterNeeds.map(need => need.storeName)).size;
    const averageFiltersPerStore = totalStores > 0 ? Math.round(totalFilters / totalStores) : 0;
    const storesWithWarnings = new Set(Array.from(filterWarnings.keys()).map(orderId => 
      filterNeeds.find(need => need.orderId === orderId)?.storeName
    )).size;
    const warningPercentage = totalStores > 0 ? Math.round((storesWithWarnings / totalStores) * 100) : 0;
    
    // Performance metrics
    const efficiency = Math.min(100, Math.max(0, 100 - warningPercentage));
    const efficiencyColor = 
      efficiency >= 90 ? 'text-green-500 dark:text-green-400' :
      efficiency >= 75 ? 'text-blue-500 dark:text-blue-400' :
      efficiency >= 50 ? 'text-amber-500 dark:text-amber-400' :
      'text-red-500 dark:text-red-400';
    
    return (
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-300">Total Filters</h3>
            <FiBox className="text-blue-500 dark:text-blue-400 text-xl" />
          </div>
          <div className="mt-2">
            <span className="text-3xl font-bold text-gray-800 dark:text-white">{totalFilters}</span>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
              {totalBoxes} {totalBoxes === 1 ? 'box' : 'boxes'} needed
            </p>
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-300">Efficiency</h3>
            <FiBarChart2 className={`${efficiencyColor} text-xl`} />
          </div>
          <div className="mt-2">
            <span className={`text-3xl font-bold ${efficiencyColor}`}>{efficiency}%</span>
            <div className="mt-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full">
              <div 
                className={`h-2 rounded-full ${
                  efficiency >= 90 ? 'bg-green-500 dark:bg-green-600' :
                  efficiency >= 75 ? 'bg-blue-500 dark:bg-blue-600' :
                  efficiency >= 50 ? 'bg-amber-500 dark:bg-amber-600' :
                  'bg-red-500 dark:bg-red-600'
                }`}
                style={{ width: `${efficiency}%` }}
              ></div>
            </div>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
              {storesWithWarnings} of {totalStores} stores have warnings
            </p>
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-300">Warnings</h3>
            <FiAlertTriangle className={`${warningsCount > 0 ? 'text-amber-500 dark:text-amber-400 pulse-alert' : 'text-green-500 dark:text-green-400'} text-xl`} />
          </div>
          <div className="mt-2">
            <span className="text-3xl font-bold text-gray-800 dark:text-white">{warningsCount}</span>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
              {warningsCount === 1 ? 'issue' : 'issues'} detected
            </p>
          </div>
        </div>
      </div>
    );
  };

  // Render filter breakdown
  const renderFilterBreakdown = () => {
    const filterTypes = getAllFilterTypes();
    
    // Add indicators for special fuel types
    const storesWithDEF = new Set<string>();
    const storesWithHighFlow = new Set<string>();
    
    workOrders.forEach(order => {
      const { hasDEF, hasDieselHighFlow } = checkForSpecialFuelTypes(order);
      if (hasDEF && order.customer?.name) {
        storesWithDEF.add(order.customer.name);
      }
      if (hasDieselHighFlow && order.customer?.name) {
        storesWithHighFlow.add(order.customer.name);
      }
    });
    
    // Group similar filter types (gas/diesel pairs)
    // Define the standard filter pairs with improved descriptions
    const filterPairs = [
      {
        types: ['450MB-10', '450MG-10'],
        description: 'Standard Flow'
      },
      {
        types: ['400MB-10', '400HS-10'],
        description: 'High Flow'
      },
      {
        types: ['40510D-AD', '40530W-AD'],
        description: 'Electronic Dispenser'
      },
      {
        types: ['40510A-AD', '40510W-AD'],
        description: 'Standard Dispenser'
      }
    ];
    
    // Find which pairs are present in our data
    const presentPairs = filterPairs.filter(pair => 
      pair.types.some(type => filterTypes.includes(type))
    );
    
    // Get filters that don't belong to any pair
    const singleFilters = filterTypes.filter(type => 
      !filterPairs.flatMap(pair => pair.types).includes(type)
    );
    
    // Calculate grid columns based on number of cards
    const getGridColumnsClass = (itemCount: number) => {
      // For mobile, always 1 column
      // For medium screens and up, adjust based on item count
      switch (itemCount) {
        case 1: return 'grid-cols-1 md:grid-cols-1';
        case 2: return 'grid-cols-1 md:grid-cols-2';
        case 3: return 'grid-cols-1 md:grid-cols-3';
        case 4: return 'grid-cols-1 md:grid-cols-4';
        case 5: return 'grid-cols-1 md:grid-cols-5';
        case 6: return 'grid-cols-1 md:grid-cols-6';
        default: return 'grid-cols-1 md:grid-cols-3 lg:grid-cols-4';
      }
    };
    
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-300">Filter Breakdown</h3>
          <div className="flex items-center gap-3">
          </div>
        </div>
        
        <div className="space-y-6">
          {/* Paired filters section */}
          {presentPairs.length > 0 && (
            <div>
              <div className={`grid ${getGridColumnsClass(presentPairs.length)} gap-4 auto-rows-fr w-full`}>
                {presentPairs.map((pair, idx) => {
                  const presentTypes = pair.types.filter(type => filterTypes.includes(type));
                  
                  // Get quantities for comparison
                  const quantities = pair.types.map(type => {
                    if (!filterTypes.includes(type)) return 0;
                    return getTotalQuantity(type);
                  });
                  
                  // Sum of all quantities for this pair
                  const totalQuantity = quantities.reduce((sum, qty) => sum + qty, 0);
                  
                  // Calculate how many boxes each filter type needs
                  const boxesNeeded = pair.types.map(type => {
                    if (!filterTypes.includes(type)) return 0;
                    return getBoxesNeeded(getTotalQuantity(type));
                  });
                  
                  return (
                    <div key={idx} className="border dark:border-gray-700 rounded-lg overflow-hidden h-full flex flex-col">
                      <div className="px-3 py-2 bg-gray-50 dark:bg-gray-700/50 border-b dark:border-gray-600">
                        <div className="font-medium text-gray-800 dark:text-gray-200">
                          {presentTypes.join(' / ')}
                        </div>
                      </div>
                      
                      <div className="p-3 flex-grow flex flex-col">
                        <div className="flex items-center mb-1">
                          <div className="w-24 text-xs font-medium text-gray-500 dark:text-gray-400">Total Filters:</div>
                          <div className="text-sm font-semibold text-gray-800 dark:text-gray-200 ml-2">{totalQuantity}</div>
                        </div>
                        
                        <div className="flex items-center mb-1">
                          <div className="w-24 text-xs font-medium text-gray-500 dark:text-gray-400">Total Boxes:</div>
                          <div className="text-sm font-semibold text-gray-800 dark:text-gray-200 ml-2">
                            {boxesNeeded.reduce((sum, boxes) => sum + boxes, 0)}
                          </div>
                        </div>
                        
                        <div className="mt-3 h-2 bg-gray-200 dark:bg-gray-700 rounded-full mb-1.5">
                          {pair.types.map((type, index) => {
                            if (!filterTypes.includes(type)) return null;
                            const quantity = getTotalQuantity(type);
                            // Calculate width as percentage of total for this pair
                            const widthPercent = totalQuantity > 0 ? (quantity / totalQuantity) * 100 : 0;
                            // Determine if gas or diesel based on part number pattern
                            const isGas = type.includes('MB') || type.includes('510A') || type.includes('510D');
                            
                            return (
                              <div 
                                key={type} 
                                className={`h-2 rounded-full ${isGas ? 'bg-blue-500 dark:bg-blue-600' : 'bg-amber-500 dark:bg-amber-600'}`} 
                                style={{ 
                                  width: `${widthPercent}%`,
                                  float: 'left',
                                  borderTopRightRadius: index === pair.types.length - 1 ? '0.25rem' : '0',
                                  borderBottomRightRadius: index === pair.types.length - 1 ? '0.25rem' : '0'
                                }}
                                title={`${type}: ${quantity} filters`}
                              ></div>
                            );
                          })}
                        </div>
                        
                        <div className="grid grid-cols-2 gap-4 mt-auto pt-4">
                          {pair.types.map(type => {
                            if (!filterTypes.includes(type)) return null;
                            
                            const quantity = getTotalQuantity(type);
                            const boxesNeeded = getBoxesNeeded(quantity);
                            // Determine if gas or diesel based on part number pattern
                            const isGas = type.includes('MB') || type.includes('510A') || type.includes('510D');
                            const filterCategory = isGas ? 'Gas' : 'Diesel';
                            const bgColorClass = isGas ? 'bg-blue-50 dark:bg-blue-900/20' : 'bg-amber-50 dark:bg-amber-900/20';
                            const borderColorClass = isGas ? 'border-blue-100 dark:border-blue-800/30' : 'border-amber-100 dark:border-amber-800/30';
                            
                            return (
                              <div key={type} className={`border ${borderColorClass} rounded-lg p-3 ${bgColorClass} h-full flex flex-col`}>
                                <div className="flex items-start justify-between">
                                  <div className="flex items-center">
                                    <span className={`inline-block w-3 h-3 rounded-full mr-1.5 ${isGas ? 'bg-blue-500' : 'bg-amber-500'}`}></span>
                                    <span className="font-medium text-gray-800 dark:text-gray-200">
                                      {filterCategory}
                                    </span>
                                  </div>
                                  {/* Add verification indicator if needed */}
                                  {filterWarnings.size > 0 && Array.from(filterWarnings.entries()).some(([orderId, warnings]) => {
                                    const needsWithType = filterNeeds.filter(need => need.orderId === orderId && need.partNumber === type);
                                    return needsWithType.length > 0 && warnings.some(w => 
                                      (w.warning && w.warning.toLowerCase().includes('verify')) || 
                                      (w.message && w.message.toLowerCase().includes('verify'))
                                    );
                                  }) && (
                                    <span 
                                      className="text-amber-500 dark:text-amber-400"
                                    >
                                      <FiAlertTriangle className="w-4 h-4 pulse-alert" />
                                    </span>
                                  )}
                                </div>
                                <div className="mt-1.5 flex items-center justify-between">
                                  <span className="text-xl font-bold text-gray-700 dark:text-gray-300">{quantity}</span>
                                  <span className="text-xs text-gray-500 dark:text-gray-400">
                                    {boxesNeeded} {boxesNeeded === 1 ? 'box' : 'boxes'}
                                  </span>
                                </div>
                                <div className="mt-auto pt-2 h-1.5 bg-gray-200 dark:bg-gray-700 rounded-full">
                                  <div 
                                    className={`h-1.5 rounded-full ${isGas ? 'bg-blue-500' : 'bg-amber-500'}`} 
                                    style={{ width: `${Math.min(100, (quantity / (boxesNeeded * 12)) * 100)}%` }}
                                  ></div>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    </div>
                  );
                })}
                
                {/* Placeholder card removed */}
              </div>
            </div>
          )}
          
          {/* Individual filters section */}
          {singleFilters.length > 0 && (
            <div>
              <h4 className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-3">Individual Filters</h4>
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-4 auto-rows-fr">
                {singleFilters.map(type => {
                  const quantity = getTotalQuantity(type);
                  const boxesNeeded = getBoxesNeeded(quantity);
                  // Determine if gas or diesel based on part number pattern
                  const isGas = type.includes('MB') || type.includes('510A') || type.includes('510D');
                  const colorClass = isGas ? 'bg-blue-500 dark:bg-blue-600' : 'bg-amber-500 dark:bg-amber-600';
                  const bgColorClass = isGas ? 'bg-blue-50 dark:bg-blue-900/20' : 'bg-amber-50 dark:bg-amber-900/20';
                  const borderColorClass = isGas ? 'border-blue-100 dark:border-blue-800/30' : 'border-amber-100 dark:border-amber-800/30';
                  
                  return (
                    <div key={type} className={`border ${borderColorClass} rounded-lg p-3 ${bgColorClass} h-full flex flex-col`}>
                      <div className="flex items-start justify-between">
                        <div>
                          <span className="font-medium text-gray-800 dark:text-gray-200">
                            {isGas ? 'Gas' : 'Diesel'}
                          </span>
                        </div>
                        {/* Add verification indicator if needed */}
                        {filterWarnings.size > 0 && Array.from(filterWarnings.entries()).some(([orderId, warnings]) => {
                          const needsWithType = filterNeeds.filter(need => need.orderId === orderId && need.partNumber === type);
                          return needsWithType.length > 0 && warnings.some(w => 
                            (w.warning && w.warning.toLowerCase().includes('verify')) || 
                            (w.message && w.message.toLowerCase().includes('verify'))
                          );
                        }) && (
                          <span 
                            className="text-amber-500 dark:text-amber-400"
                          >
                            <FiAlertTriangle className="w-4 h-4 pulse-alert" />
                          </span>
                        )}
                      </div>
                      <div className="mt-2 flex items-baseline justify-between">
                        <div>
                          <span className="text-2xl font-bold text-gray-700 dark:text-gray-300">{quantity}</span>
                          <span className="ml-1 text-sm font-normal text-gray-500 dark:text-gray-400">filters</span>
                        </div>
                        <span className="text-xs text-gray-500 dark:text-gray-400">
                          {boxesNeeded} {boxesNeeded === 1 ? 'box' : 'boxes'}
                        </span>
                      </div>
                      <div className="mt-auto pt-4">
                        <div className="h-2 bg-gray-200 dark:bg-gray-700 rounded-full">
                          <div 
                            className={`h-2 rounded-full ${colorClass}`}
                            style={{ width: `${Math.min(100, (quantity / (boxesNeeded * 12)) * 100)}%` }}
                          ></div>
                        </div>
                        <div className="mt-1 text-xs text-right text-gray-500 dark:text-gray-400">
                          {quantity} of {boxesNeeded * 12}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  // Check for DEF or Diesel High Flow in the dispenser information
  const checkForSpecialFuelTypes = (order: WorkOrder): { hasDEF: boolean; hasDieselHighFlow: boolean } => {
    const result = { hasDEF: false, hasDieselHighFlow: false };
    
    // Check instructions and service descriptions for DEF mentions
    const instructions = order.instructions?.toLowerCase() || '';
    const serviceFuel = order.services?.some(service => 
      (service.description?.toLowerCase() || '').includes('def') || 
      (service.description?.toLowerCase() || '').includes('diesel exhaust fluid')
    ) || false;
    
    if (
      instructions.includes('def') || 
      serviceFuel ||
      instructions.includes('diesel exhaust fluid')
    ) {
      result.hasDEF = true;
    }
    
    // Check for Diesel High Flow mentions
    if (
      instructions.includes('high flow diesel') || 
      instructions.includes('diesel high flow') ||
      order.services?.some(service => 
        (service.description?.toLowerCase() || '').includes('high flow diesel') ||
        (service.description?.toLowerCase() || '').includes('diesel high flow')
      )
    ) {
      result.hasDieselHighFlow = true;
    }
    
    // Check dispenser data if available
    if (order.dispensers && order.dispensers.length > 0) {
      order.dispensers.forEach(dispenser => {
        const dispenserTitle = dispenser.title?.toLowerCase() || '';
        const dispenserFields = dispenser.fields || {};
        
        // Check dispenser title for DEF
        if (dispenserTitle.includes('def') || dispenserTitle.includes('diesel exhaust fluid')) {
          result.hasDEF = true;
        }
        
        // Check for high flow information in fields
        Object.entries(dispenserFields).forEach(([key, value]) => {
          const fieldKey = key.toLowerCase();
          const fieldValue = (value as string)?.toLowerCase() || '';
          
          if (
            fieldValue.includes('def') || 
            fieldValue.includes('diesel exhaust fluid')
          ) {
            result.hasDEF = true;
          }
          
          if (
            fieldValue.includes('high flow') && 
            (fieldValue.includes('diesel') || fieldKey.includes('diesel'))
          ) {
            result.hasDieselHighFlow = true;
          }
        });
      });
    }
    
    return result;
  };

  // Render filter warnings
  const renderFilterWarnings = () => {
    if (filterWarnings.size === 0) {
      return (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-6">
          <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-2">Filter Warnings</h3>
          <div className="p-4 text-center text-gray-500 dark:text-gray-400">
            <FiCheckCircle className="w-10 h-10 mx-auto mb-2 text-green-500" />
            <p>No filter warnings detected</p>
          </div>
        </div>
      );
    }

    // Enhanced deduplication by normalizing messages and grouping by key identifiers
    const flattenedWarnings: ExtendedFilterWarning[] = [];
    Array.from(filterWarnings.entries()).forEach(([orderId, warnings]) => {
      warnings.forEach(warning => {
        // Add order ID to warning for store lookup
        const needWithStore = filterNeeds.find(need => need.orderId === orderId);
        const extendedWarning: ExtendedFilterWarning = {
          ...warning,
          orderId,
          storeName: needWithStore?.storeName
        };
        flattenedWarnings.push(extendedWarning);
      });
      
      // We no longer add warnings for DEF and Diesel High Flow
      // They're now handled in the filter needs section for 7-Eleven
      // and displayed as indicators in the UI
    });
    
    interface WarningGroup {
      type: string;
      filterType: string;
      station: string;
      count: number;
      instances: ExtendedFilterWarning[];
      severity: number;
      stores: string[];
      needsVerification: boolean;
    }

    const groupedWarnings = flattenedWarnings.reduce((acc: Record<string, WarningGroup>, warning: ExtendedFilterWarning) => {
      // Create a normalized key from the warning message that ignores small text differences
      const message = warning.message || warning.warning || '';
      const normalizedMessage = message
        .replace(/\b(\d+)\b/g, 'NUM') // Replace numbers with placeholder
        .replace(/\b([A-Za-z0-9-]+)\b/g, (word: string) => {
          // Check if word is a filter part number
          return getAllFilterTypes().includes(word) ? 'FILTER_TYPE' : word;
        })
        .toLowerCase();
      
      // Extract the key identifiers - filter type, station, and warning type
      const filterType = message.match(/\b([A-Za-z0-9-]+)\b/g)?.find((word: string) => 
        getAllFilterTypes().includes(word)
      ) || 'unknown';
      
      const stationMatch = message.match(/Station (\d+)/i);
      const station = stationMatch ? stationMatch[1] : 'all';
      
      const warningType = 
        message.includes('low') ? 'low_inventory' :
        message.includes('missing') ? 'missing_filters' :
        message.includes('excessive') ? 'excessive_use' : 'other';
      
      const needsVerification = message.toLowerCase().includes('verify');
      
      // Create a unique key for the warning group
      const key = `${warningType}_${filterType}_${station}`;
      
      if (!acc[key]) {
        acc[key] = {
          type: warningType,
          filterType,
          station,
          count: 0,
          instances: [],
          severity: warning.severity || 5,
          stores: [],
          needsVerification: false
        };
      }
      
      acc[key].count++;
      acc[key].instances.push(warning);
      
      // Collect store names
      if (warning.storeName && !acc[key].stores.includes(warning.storeName)) {
        acc[key].stores.push(warning.storeName);
      }
      
      // If any instance needs verification, the group needs verification
      if (needsVerification) {
        acc[key].needsVerification = true;
      }
      
      // Use the highest severity found for this warning group
      const warningSeverity = warning.severity || 0;
      if (warningSeverity > acc[key].severity) {
        acc[key].severity = warningSeverity;
      }
      
      return acc;
    }, {});

    // Sort warnings by verification need, then severity (high to low)
    const sortedWarningGroups = Object.values(groupedWarnings).sort((a: WarningGroup, b: WarningGroup) => {
      // First sort by verification needed
      if (a.needsVerification && !b.needsVerification) return -1;
      if (!a.needsVerification && b.needsVerification) return 1;
      
      // Then by severity
      return b.severity - a.severity || b.count - a.count;
    });

    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-6">
        <div className="mb-4">
          <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-300">Filter Warnings</h3>
        </div>
        
        <div className="space-y-3">
          {sortedWarningGroups.map((group, index) => {
            const { type, filterType, count, instances, severity, stores, needsVerification } = group;
            
            // Generate a descriptive title for the warning group
            let title = '';
            if (type === 'low_inventory') {
              title = `Low inventory for ${filterType} filters`;
            } else if (type === 'missing_filters') {
              title = `Missing ${filterType} filters`;
            } else if (type === 'excessive_use') {
              title = `Excessive use of ${filterType} filters`;
            } else {
              title = instances[0].message || instances[0].warning || 'Warning'; // Fallback to first message
            }
            
            // Color based on severity and verification need
            const severityColor = needsVerification
              ? 'bg-amber-50 dark:bg-amber-900/20 border-amber-200 dark:border-amber-800/30'
              : severity >= 8 
                ? 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800/30' 
                : severity >= 5 
                  ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800/30'
                  : 'bg-gray-50 dark:bg-gray-900/20 border-gray-200 dark:border-gray-800/30';
              
            const iconColor = needsVerification
              ? 'text-amber-500 dark:text-amber-400'
              : severity >= 8 
                ? 'text-red-500 dark:text-red-400' 
                : severity >= 5 
                  ? 'text-blue-500 dark:text-blue-400'
                  : 'text-gray-500 dark:text-gray-400';
              
            return (
              <div 
                key={index}
                className={`border ${severityColor} rounded-lg p-3`}
              >
                <div className="flex items-start">
                  <div className={`mt-0.5 p-1.5 rounded-full ${severityColor}`}>
                    {needsVerification ? (
                      <FiAlertTriangle className={`w-4 h-4 ${iconColor} pulse-alert`} />
                    ) : severity >= 8 ? (
                      <FiAlertTriangle className={`w-4 h-4 ${iconColor} pulse-alert`} />
                    ) : severity >= 5 ? (
                      <FiAlertCircle className={`w-4 h-4 ${iconColor} pulse-alert`} />
                    ) : (
                      <FiInfo className={`w-4 h-4 ${iconColor}`} />
                    )}
                  </div>
                  <div className="ml-3 flex-1">
                    <div className="flex flex-wrap items-center gap-2">
                      <h4 className="text-sm font-medium text-gray-800 dark:text-gray-200">
                        {title}
                      </h4>
                      {count > 1 && (
                        <span className="text-xs bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-400 px-1.5 py-0.5 rounded-full">
                          {count}
                        </span>
                      )}
                      {needsVerification && (
                        <span className="text-xs bg-amber-100 dark:bg-amber-900/30 text-amber-600 dark:text-amber-400 px-1.5 py-0.5 rounded-full">
                          Needs Verification
                        </span>
                      )}
                    </div>
                    
                    {/* Store and job indicators */}
                    <div className="mt-1.5 flex flex-wrap gap-1">
                      {stores.length > 0 && stores.map((store, i) => (
                        <span 
                          key={i} 
                          className={`text-xs ${getStoreColor(store).bg} ${getStoreColor(store).text} px-1.5 py-0.5 rounded`}
                        >
                          <FiMapPin className="inline-block mr-1 w-3 h-3" />
                          {store}
                        </span>
                      ))}
                      
                      {/* Add job count badge */}
                      <span 
                        className="text-xs bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 px-1.5 py-0.5 rounded flex items-center"
                        title="Number of jobs affected by this warning"
                      >
                        <FiTool className="inline-block mr-1 w-3 h-3" />
                        {new Set(instances.map(instance => instance.orderId)).size} job{new Set(instances.map(instance => instance.orderId)).size !== 1 ? 's' : ''}
                      </span>
                    </div>
                    
                    <div className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                      {count > 1 ? (
                        <details className="cursor-pointer">
                          <summary className="text-blue-600 dark:text-blue-400 text-xs">
                            View {count} related warnings
                          </summary>
                          <ul className="mt-2 ml-2 space-y-1 text-xs">
                            {instances.map((warning, i) => (
                              <li key={i} className="list-disc ml-4">
                                {warning.message || warning.warning}
                                <div className="mt-1 flex flex-wrap gap-1">
                                  {warning.storeName && (() => {
                                    const storeColors = getStoreColor(warning.storeName);
                                    return (
                                      <span className={`text-xs ${storeColors.lightBg} ${storeColors.text} px-1.5 py-0.5 rounded flex items-center`}>
                                        <FiMapPin className="mr-1 w-3 h-3" />
                                        {warning.storeName}
                                      </span>
                                    );
                                  })()}
                                  {warning.orderId && (() => {
                                    const order = workOrders.find(order => order.id === warning.orderId);
                                    const visitData = order?.visits ? Object.values(order.visits)[0] : null;
                                    return (
                                      <span className="text-xs bg-gray-50 dark:bg-gray-800 text-gray-600 dark:text-gray-400 px-1.5 py-0.5 rounded flex items-center">
                                        <FiInfo className="mr-1 w-3 h-3" />
                                        Job: {visitData?.visitId || warning.orderId.slice(0, 8)}
                                      </span>
                                    );
                                  })()}
                                </div>
                              </li>
                            ))}
                          </ul>
                        </details>
                      ) : (
                        <p>{instances[0].message || instances[0].warning}</p>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  // Add a function to get store-specific colors
  // Get color for store
  const getStoreColor = (storeName: string): { border: string, bg: string, text: string, lightBg: string } => {
    if (!storeName) return {
      border: 'border-gray-300 dark:border-gray-700',
      bg: 'bg-gray-100 dark:bg-gray-800',
      text: 'text-gray-700 dark:text-gray-300',
      lightBg: 'bg-gray-50 dark:bg-gray-900/20'
    };
    
    if (storeName.includes('Wawa')) {
      return {
        border: 'border-purple-300 dark:border-purple-800',
        bg: 'bg-purple-100 dark:bg-purple-900/30',
        text: 'text-purple-700 dark:text-purple-300',
        lightBg: 'bg-purple-50 dark:bg-purple-900/20'
      };
    } else if (storeName.includes('Circle K')) {
      return {
        border: 'border-orange-300 dark:border-orange-800',
        bg: 'bg-orange-100 dark:bg-orange-900/30',
        text: 'text-orange-700 dark:text-orange-300',
        lightBg: 'bg-orange-50 dark:bg-orange-900/20'
      };
    } else if (storeName.includes('7-Eleven')) {
      return {
        border: 'border-green-300 dark:border-green-800',
        bg: 'bg-green-100 dark:bg-green-900/30',
        text: 'text-green-700 dark:text-green-300',
        lightBg: 'bg-green-50 dark:bg-green-900/20'
      };
    } else if (storeName.includes('Speedway')) {
      return {
        border: 'border-red-300 dark:border-red-800',
        bg: 'bg-red-100 dark:bg-red-900/30',
        text: 'text-red-700 dark:text-red-300',
        lightBg: 'bg-red-50 dark:bg-red-900/20'
      };
    }
    
    // Default colors
    return {
      border: 'border-blue-300 dark:border-blue-800',
      bg: 'bg-blue-100 dark:bg-blue-900/30',
      text: 'text-blue-700 dark:text-blue-300',
      lightBg: 'bg-blue-50 dark:bg-blue-900/20'
    };
  };

  // Add a timer effect to check for work week transitions at 5:00pm on Friday
  useEffect(() => {
    // Function to check if we're at the end of work week after 5:00pm
    const checkForWorkWeekTransition = () => {
      const now = new Date();
      const currentDayOfWeek = now.getDay();
      const currentHour = now.getHours();
      const currentMinute = now.getMinutes();
      
      // Check if we're at Friday (5) and it's between 5:00pm and 5:05pm
      // The 5-minute window ensures we don't miss the transition and don't refresh too often
      if (currentDayOfWeek === 5 && 
          currentHour === 17 && 
          currentMinute < 5) {
        console.log("Work week transition detected at 5:00pm - refreshing filters view");
        
        // Calculate next Monday-Friday
        const day = now.getDay(); // 5 = Friday
        const currentMonday = new Date(now);
        const daysToNextMonday = (8 - day) % 7; // Distance to next Monday (3 days: Sat, Sun, Mon)
        
        // Set to next Monday
        currentMonday.setDate(now.getDate() + daysToNextMonday);
        currentMonday.setHours(0, 0, 0, 0);
        
        // Calculate next Friday (4 days after Monday)
        const nextFriday = new Date(currentMonday);
        nextFriday.setDate(currentMonday.getDate() + 4);
        nextFriday.setHours(17, 0, 0, 0);
        
        // Update the selected date range
        setSelectedDateRange([currentMonday, nextFriday]);
        
        // Update current week
        setCurrentWeek(currentMonday);
        
        // Optionally show a toast notification
        addToast('info', 'Switched to weekend mode - next week is now this week', 3000);
      }
    };
    
    // Run the check immediately in case we're already at 5:00pm
    checkForWorkWeekTransition();
    
    // Set up an interval to check every minute
    const intervalId = setInterval(checkForWorkWeekTransition, 60000);
    
    return () => {
      clearInterval(intervalId);
    };
  }, [addToast]);

  // Check on initial render if we're already after 5:00pm on Friday
  useEffect(() => {
    const now = new Date();
    const currentDayOfWeek = now.getDay();
    const currentHour = now.getHours();
    
    if (currentDayOfWeek === 5 && currentHour >= 17) {
      // If we're loading after 5:00pm on Friday, update the UI to show next week
      console.log("Page loaded after 5:00pm on Friday - using weekend mode");
      
      // Calculate next Monday-Friday
      const day = now.getDay(); // 5 = Friday
      const currentMonday = new Date(now);
      const daysToNextMonday = (8 - day) % 7; // Distance to next Monday (3 days: Sat, Sun, Mon)
      
      // Set to next Monday
      currentMonday.setDate(now.getDate() + daysToNextMonday);
      currentMonday.setHours(0, 0, 0, 0);
      
      // Calculate next Friday (4 days after Monday)
      const nextFriday = new Date(currentMonday);
      nextFriday.setDate(currentMonday.getDate() + 4);
      nextFriday.setHours(17, 0, 0, 0);
      
      // Update the selected date range
      setSelectedDateRange([currentMonday, nextFriday]);
      
      // Update current week
      setCurrentWeek(currentMonday);
    }
  }, []);

  return (
    <div className="container mx-auto px-4 py-6 max-w-7xl">
      {isLoading ? (
        <div className="flex items-center justify-center h-64">
          <div className="flex flex-col items-center">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600"></div>
            <p className="mt-4 text-gray-600 dark:text-gray-400">Loading dispenser data...</p>
          </div>
        </div>
      ) : (
        <>
          <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6 bg-dark-800 dark:bg-gray-900 p-4 rounded-lg shadow">
            <div className="flex items-center">
              <FiFilter className="text-blue-500 dark:text-blue-400 h-6 w-6 mr-3" />
              <h1 className="text-2xl font-bold text-gray-800 dark:text-white">Filters Dashboard</h1>
            </div>
            
            <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 mt-4 md:mt-0">
              <div className="relative flex items-center">
                <button 
                  onClick={goToPreviousWeek}
                  className="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-l-lg border border-gray-300 dark:border-gray-700"
                >
                  <FiChevronLeft />
                </button>
                
                <div className="relative">
                  <DatePicker
                    selected={currentWeek}
                    onChange={(date: Date | null) => {
                      if (date) {
                        setCurrentWeek(date);
                        
                        // Calculate Monday-Friday of the selected week
                        const day = date.getDay(); // 0-6
                        const diff = date.getDate() - day + (day === 0 ? -6 : 1); // Calculate days to Monday
                        
                        const monday = new Date(date);
                        monday.setDate(diff);
                        monday.setHours(0, 0, 0, 0);
                        
                        const friday = new Date(monday);
                        friday.setDate(monday.getDate() + 4);
                        friday.setHours(17, 0, 0, 0);
                        
                        // Update selectedDateRange to match
                        setSelectedDateRange([monday, friday]);
                      }
                    }}
                    customInput={
                      <button className="px-4 py-2 h-12 bg-white dark:bg-gray-800 border-t border-b border-gray-300 dark:border-gray-700 flex items-center text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors justify-center w-48 shadow-sm">
                        <div className="flex flex-col items-center">
                          <div className="text-xs font-medium uppercase tracking-wider text-blue-500 dark:text-blue-400 mb-1">
                            WORK WEEK
                          </div>
                          <div className="text-sm font-semibold">
                            {formatDateRange(selectedDateRange)}
                          </div>
                        </div>
                      </button>
                    }
                    inline={false}
                    highlightDates={[
                      {
                        "react-datepicker__day--highlighted-business": Array.from(
                          { length: 365 }, 
                          (_, i) => {
                            const date = new Date();
                            date.setDate(date.getDate() + i - 180); // Generate dates 180 days in past and future
                            const day = date.getDay();
                            return day !== 0 && day !== 6 ? date : null; // Highlight weekdays
                          }
                        ).filter(Boolean) as Date[]
                      }
                    ]}
                    calendarClassName="business-week-calendar"
                    dayClassName={date => {
                      return (date.getDay() === 1) ? "monday-marker" : "";
                    }}
                  />
                </div>
                
                <button 
                  onClick={goToNextWeek}
                  className="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-r-lg border border-gray-300 dark:border-gray-700"
                >
                  <FiChevronRight />
                </button>
                
                <button 
                  onClick={goToCurrentWeek}
                  className="ml-2 px-3 py-2 text-xs bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 rounded border border-blue-200 dark:border-blue-800/30 flex items-center"
                >
                  <FiRefreshCw className="mr-1 h-3 w-3" />
                  Today
                </button>
              </div>
            </div>
          </div>

          {/* Summary Cards */}
          {renderWeeklySummaryCards()}
          
          {/* Filter Breakdown */}
          {renderFilterBreakdown()}
          
          {/* Filter Warnings */}
          {renderFilterWarnings()}
          
          {/* Filter Needs Table - Segmented by date and visit ID */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
            <div className="px-4 py-5 sm:px-6 border-b border-gray-200 dark:border-gray-700">
              <h3 className="text-lg font-medium leading-6 text-gray-900 dark:text-white">Filters Required</h3>
              <p className="mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400">
                Detailed breakdown of filters needed for upcoming services
              </p>
            </div>
            <div className="overflow-x-auto">
              {(() => {
                // Group needs by date
                const groupedByDate = new Map<string, ExtendedFilterNeed[]>();
                
                // Sort needs by date first
                const sortedNeeds = [...filterNeeds].sort((a, b) => {
                  const dateA = new Date(a.visitDate).getTime();
                  const dateB = new Date(b.visitDate).getTime();
                  return dateA - dateB;
                });
                
                // Group by date
                sortedNeeds.forEach(need => {
                  const dateKey = new Date(need.visitDate).toLocaleDateString();
                  if (!groupedByDate.has(dateKey)) {
                    groupedByDate.set(dateKey, []);
                  }
                  groupedByDate.get(dateKey)?.push(need);
                });

                // Get list of orders that need verification
                const ordersNeedingVerification = new Set(
                  Array.from(filterWarnings.entries())
                    .filter(([_, warnings]) => 
                      warnings.some(w => 
                        (w.warning && w.warning.toLowerCase().includes('verify')) || 
                        (w.message && w.message.toLowerCase().includes('verify'))
                      )
                    )
                    .map(([orderId]) => orderId)
                );
                
                // Render groups
                return Array.from(groupedByDate.entries()).map(([dateKey, needs]) => (
                  <div key={dateKey} className="mb-2">
                    <div className="px-4 py-2 bg-gray-50 dark:bg-gray-900 border-b border-t border-gray-200 dark:border-gray-700 sticky top-0 z-10">
                      <div className="flex items-center">
                        <FiCalendar className="text-gray-500 dark:text-gray-400 mr-2" />
                        <span className="font-medium text-gray-700 dark:text-gray-300">{dateKey}</span>
                        <span className="ml-2 text-xs bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-400 px-2 py-0.5 rounded-full">
                          {needs.length} filters
                        </span>
                      </div>
                    </div>
                    
                    {/* Group by visit ID within each date */}
                    {(() => {
                      const visitGroups = new Map<string, ExtendedFilterNeed[]>();
                      
                      // Group by visit ID
                      needs.forEach(need => {
                        const visitKey = need.visitId || 'Unknown';
                        if (!visitGroups.has(visitKey)) {
                          visitGroups.set(visitKey, []);
                        }
                        visitGroups.get(visitKey)?.push(need);
                      });
                      
                      return Array.from(visitGroups.entries()).map(([visitId, visitNeeds]) => {
                        // Check if any needs in this group need verification
                        const anyNeedsVerification = visitNeeds.some(need => 
                          ordersNeedingVerification.has(need.orderId)
                        );

                        // Get unique order IDs for this visit
                        const orderIds = [...new Set(visitNeeds.map(need => need.orderId))];
                        
                        return (
                          <div key={visitId} className={`border-b ${getStoreColor(visitNeeds[0]?.storeName || '').border}`}>
                            <div className={`px-4 py-2 ${anyNeedsVerification ? 'bg-amber-50/50 dark:bg-amber-900/10' : 'bg-gray-50/50 dark:bg-gray-800/50'} border-b border-gray-100 dark:border-gray-800 border-l-4 ${getStoreColor(visitNeeds[0]?.storeName || '').border}`}>
                              <div className="flex justify-between items-center">
                                <div className="flex items-center">
                                  <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Visit ID: {visitId}</span>
                                  {visitNeeds[0]?.storeName && (() => {
                                    const storeColors = getStoreColor(visitNeeds[0].storeName);
                                    return (
                                      <span className={`ml-2 text-xs ${storeColors.bg} ${storeColors.text} px-2 py-0.5 rounded-full`}>
                                        {visitNeeds[0].storeName}
                                      </span>
                                    );
                                  })()}
                                  {anyNeedsVerification && (
                                    <span 
                                      className="ml-2 text-xs bg-amber-100 dark:bg-amber-900/30 text-amber-600 dark:text-amber-400 px-2 py-0.5 rounded-full flex items-center"
                                    >
                                      <FiAlertCircle className="mr-1 pulse-alert" /> Needs Verification
                                    </span>
                                  )}
                                </div>
                                {/* Add Dispenser button here */}
                                <div className="flex items-center gap-2">
                                  {/* DEF and Diesel High Flow indicators */}
                                  {(() => {
                                    const order = workOrders.find(order => orderIds.includes(order.id));
                                    if (!order) return null;
                                    
                                    const { hasDEF, hasDieselHighFlow } = checkForSpecialFuelTypes(order);
                                    
                                    return (
                                      <>
                                        {hasDEF && (
                                          <span className="text-xs bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-400 px-1.5 py-0.5 rounded">
                                            DEF
                                          </span>
                                        )}
                                        {hasDieselHighFlow && (
                                          <span className="text-xs bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-400 px-1.5 py-0.5 rounded">
                                            High Flow
                                          </span>
                                        )}
                                      </>
                                    );
                                  })()}
                                  <button
                                    onClick={() => {
                                      setSelectedOrderId(orderIds[0]);  // Use the first order ID
                                      setCurrentDispenserInfo('show');
                                    }}
                                    className="px-2 py-1 text-xs bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 rounded flex items-center hover:bg-blue-100 dark:hover:bg-blue-800/50 transition-colors"
                                  >
                                    <FiEye className="mr-1" /> Dispensers
                                  </button>
                                </div>
                              </div>
                            </div>
                            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700 overflow-hidden rounded-b-lg">
                              <thead className="bg-gray-50/30 dark:bg-gray-900/30">
                                <tr>
                                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                    Part Number
                                  </th>
                                  <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider w-32">
                                    Quantity
                                  </th>
                                  <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider w-32">
                                    Status
                                  </th>
                                </tr>
                              </thead>
                              <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                                {visitNeeds.map((need, index) => {
                                  const needsVerification = ordersNeedingVerification.has(need.orderId);
                                  const warnings = filterWarnings.get(need.orderId) || [];
                                  const tooltipContent = warnings.map(w => w.message || w.warning).join(', ');
                                  
                                  return (
                                    <tr key={`${need.orderId}-${need.partNumber}-${index}`} className={`hover:bg-gray-50 dark:hover:bg-gray-700/50 ${needsVerification ? 'bg-amber-50/30 dark:bg-amber-900/5' : ''}`}>
                                      <td className="px-6 py-3 whitespace-nowrap">
                                        <div className="flex items-center">
                                          <span className="text-sm text-gray-900 dark:text-white">
                                            {need.partNumber}
                                          </span>
                                          {filterWarnings.has(need.orderId) && (
                                            <FiAlertCircle 
                                              className={`ml-2 ${needsVerification ? 'text-amber-500 pulse-alert' : 'text-blue-500'}`}
                                            />
                                          )}
                                        </div>
                                      </td>
                                      <td className="px-6 py-3 whitespace-nowrap text-center">
                                        <span className="inline-flex px-2 py-1 text-xs font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 rounded-full">
                                          {need.quantity}x
                                        </span>
                                      </td>
                                      <td className="px-6 py-3 whitespace-nowrap text-center">
                                        {needsVerification ? (
                                          <span className="inline-flex items-center px-2 py-1 text-xs font-medium bg-amber-100 dark:bg-amber-900/30 text-amber-800 dark:text-amber-300 rounded-full">
                                            <FiAlertTriangle className="mr-1 pulse-alert" /> Verify
                                          </span>
                                        ) : (
                                          <span className="inline-flex items-center px-2 py-1 text-xs font-medium bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 rounded-full">
                                            <FiCheck className="mr-1" /> Ready
                                          </span>
                                        )}
                                      </td>
                                    </tr>
                                  );
                                })}
                              </tbody>
                            </table>
                          </div>
                        );
                      });
                    })()}
                  </div>
                ));
              })()}
            </div>
          </div>

          {/* Dispenser Info Modal */}
          {currentDispenserInfo && (
            <DispenserInfo
              dispenserHtml={workOrders.find(order => order.id === selectedOrderId)?.dispenserHtml || ''}
              dispensers={workOrders.find(order => order.id === selectedOrderId)?.dispensers || []}
              isOpen={currentDispenserInfo === 'show'}
              onClose={() => {
                setCurrentDispenserInfo(null);
                setSelectedOrderId(null);
              }}
            />
          )}
        </>
      )}
    </div>
  );
};

export default FiltersRedesign;