// Render the filters needed panel
const renderFiltersPanel = () => {
  if (isLoading) {
    return <SkeletonDashboardStats />;
  }

  // Constants for box calculations
  const GAS_FILTERS_PER_BOX = 10;
  const DIESEL_FILTERS_PER_BOX = 6;
  
  // Filter models by store type
  const FILTER_MODELS = {
    'wawa': { 
      gasModel: '450MB-10', 
      dieselModel: '450MG-10',
      gasCount: 0,
      dieselCount: 0,
      gasBoxes: 0,
      dieselBoxes: 0,
      totalFilters: 0,
      totalBoxes: 0
    },
    '7-eleven': { 
      gasModel: '400MB-10', 
      dieselModel: '400HS-10',
      gasCount: 0,
      dieselCount: 0,
      gasBoxes: 0,
      dieselBoxes: 0,
      totalFilters: 0,
      totalBoxes: 0
    },
    'circle-k': { 
      gasModel: '40510D-AD', 
      dieselModel: '40530W-AD',
      gasCount: 0,
      dieselCount: 0,
      gasBoxes: 0,
      dieselBoxes: 0,
      totalFilters: 0,
      totalBoxes: 0
    }
  };

  // Initialize counters for filter totals and types
  const filterTotals = {
    gas: 0,
    diesel: 0,
    types: {} as Record<string, number>,
    stores: {} as Record<string, {
      gas: number,
      diesel: number,
      storeType: string,
      visitNumber: string,
      filterTypes: Record<string, number>,
      warnings: string[]
    }>
  };

  // Process work orders from CURRENT WEEK ONLY
  const currentWeekOrders = dateFilteredWorkOrders.filter(order => {
    const visitDate = order.visits?.nextVisit?.date || order.nextVisitDate || order.visitDate || order.date;
    if (!visitDate) return false;

    const visitDateTime = new Date(visitDate);
    if (isNaN(visitDateTime.getTime())) return false;

    // Only include orders from the CURRENT week (not next week)
    return (
      visitDateTime >= workWeekDates.currentWeekStart &&
      visitDateTime <= workWeekDates.currentWeekEnd
    );
  });

  // Process current week work orders for filter needs
  currentWeekOrders.forEach(order => {
    try {
      // Use the existing filter calculation utility
      const { gasFilters, dieselFilters, warnings, gasFilterTypes = [], dieselFilterTypes = [] } = calculateFiltersSafely(order);

      // Skip if no filters needed
      if (gasFilters === 0 && dieselFilters === 0) return;

      // Update totals
      filterTotals.gas += gasFilters;
      filterTotals.diesel += dieselFilters;

      // Extract visitNumber
      const visitNumber = extractVisitNumber(order);

      // Get store information
      const storeName = getDisplayName(order);
      const storeType = getStoreTypeForFiltering(order);
      
      // Determine store type for filter model assignment
      let modelType = 'other';
      const normalizedStoreName = storeName.toLowerCase();
      
      if (normalizedStoreName.includes('7-eleven') || normalizedStoreName.includes('speedway')) {
        modelType = '7-eleven';
      } else if (normalizedStoreName.includes('wawa')) {
        modelType = 'wawa';
      } else if (normalizedStoreName.includes('circle k')) {
        modelType = 'circle-k';
      }
      
      // Add to the appropriate filter model counts
      if (FILTER_MODELS[modelType]) {
        FILTER_MODELS[modelType].gasCount += gasFilters;
        FILTER_MODELS[modelType].dieselCount += dieselFilters;
      }

      // Initialize store entry if needed
      if (!filterTotals.stores[storeName]) {
        filterTotals.stores[storeName] = {
          gas: 0,
          diesel: 0,
          storeType,
          visitNumber,
          filterTypes: {},
          warnings: []
        };
      }

      // Update store filter counts
      filterTotals.stores[storeName].gas += gasFilters;
      filterTotals.stores[storeName].diesel += dieselFilters;

      // Process gas filter types
      if (Array.isArray(gasFilterTypes)) {
        gasFilterTypes.forEach(type => {
          // Add to global filter types
          if (!filterTotals.types[type]) filterTotals.types[type] = 0;
          filterTotals.types[type]++;

          // Add to store filter types
          if (!filterTotals.stores[storeName].filterTypes[type]) {
            filterTotals.stores[storeName].filterTypes[type] = 0;
          }
          filterTotals.stores[storeName].filterTypes[type]++;
        });
      }

      // Process diesel filter types
      if (Array.isArray(dieselFilterTypes)) {
        dieselFilterTypes.forEach(type => {
          // Add to global filter types
          if (!filterTotals.types[type]) filterTotals.types[type] = 0;
          filterTotals.types[type]++;

          // Add to store filter types
          if (!filterTotals.stores[storeName].filterTypes[type]) {
            filterTotals.stores[storeName].filterTypes[type] = 0;
          }
          filterTotals.stores[storeName].filterTypes[type]++;
        });
      }

      // Add warnings to store
      if (warnings && warnings.length > 0) {
        // Filter for only verification warnings
        const verificationWarnings = warnings
          .filter(warning => warning.warning?.toLowerCase().includes('verify') ||
            warning.warning?.toLowerCase().includes('check'))
          .map(warning => warning.warning);

        if (verificationWarnings.length > 0) {
          filterTotals.stores[storeName].warnings.push(...verificationWarnings);
        }
      }
    } catch (error) {
      console.error("Error processing order for filters:", error);
    }
  });

  // Calculate box counts
  const gasBoxes = Math.ceil(filterTotals.gas / GAS_FILTERS_PER_BOX);
  const dieselBoxes = Math.ceil(filterTotals.diesel / DIESEL_FILTERS_PER_BOX);
  
  // Calculate box counts for each filter model
  Object.values(FILTER_MODELS).forEach(model => {
    model.gasBoxes = Math.ceil(model.gasCount / GAS_FILTERS_PER_BOX);
    model.dieselBoxes = Math.ceil(model.dieselCount / DIESEL_FILTERS_PER_BOX);
    model.totalFilters = model.gasCount + model.dieselCount;
    model.totalBoxes = model.gasBoxes + model.dieselBoxes;
  });

  // Filter out unused models
  const activeFilterModels = Object.values(FILTER_MODELS).filter(
    model => model.totalFilters > 0
  );

  // Render the panel content
  return (
    <div className="pt-4">
      {/* Week date range */}
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-base font-medium text-gray-800 dark:text-white">
          Current Week: {formatDateRange(workWeekDates.currentWeekStart, workWeekDates.currentWeekEnd)}
        </h3>
        <div className="text-sm text-gray-600 dark:text-gray-400">
          {currentWeekOrders.length} job{currentWeekOrders.length !== 1 ? 's' : ''}
        </div>
      </div>

      {/* Use the new FiltersByType component */}
      {activeFilterModels.length > 0 && <FiltersByType filterCards={activeFilterModels} />}

      {/* Filter Requirements by Location */}
      <div className="mt-6">
        <h4 className="text-base font-medium text-gray-800 dark:text-white mb-3">Filter Requirements by Location</h4>
        
        {Object.keys(filterTotals.stores).length > 0 ? (
          <div className="space-y-3">
            {Object.entries(filterTotals.stores)
              .sort((a, b) => {
                // Sort by total filters (gas + diesel) in descending order
                const totalA = a[1].gas + a[1].diesel;
                const totalB = b[1].gas + b[1].diesel;
                return totalB - totalA;
              })
              .map(([store, data]) => {
                const storeStyle = getStoreStyles(data.storeType || 'other');
                const hasWarnings = data.warnings && data.warnings.length > 0;

                return (
                  <div 
                    key={store}
                    className={`rounded-lg bg-white dark:bg-gray-800 border ${hasWarnings ? 'border-amber-300 dark:border-amber-700' : 'border-gray-200 dark:border-gray-700'} shadow-sm overflow-hidden`}
                  >
                    {/* Store header */}
                    <div className="p-3 bg-gray-50 dark:bg-gray-700/50 border-b border-gray-200 dark:border-gray-700">
                      <div className="flex justify-between items-center">
                        <div className="flex items-center">
                          <span className={`w-2 h-2 ${storeStyle.dot} rounded-full mr-2 flex-shrink-0`}></span>
                          <p className="font-medium text-gray-900 dark:text-white text-sm">
                            {store}
                          </p>
                        </div>
                        
                        {/* Visit number on same line */}
                        {data.visitNumber && data.visitNumber !== 'N/A' && (
                          <div className="text-xs text-gray-700 dark:text-gray-300">
                            <span className="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded">
                              Visit #{data.visitNumber}
                            </span>
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Filter details */}
                    <div className="p-3">
                      {/* Filter types breakdown - primary focus */}
                      {Object.keys(data.filterTypes).length > 0 && (
                        <div className="space-y-2">
                          <p className="text-xs text-gray-500 dark:text-gray-400 font-medium">Filter Models:</p>
                          <div className="flex flex-wrap gap-1.5">
                            {Object.entries(data.filterTypes)
                              .sort(([typeA], [typeB]) => typeA.localeCompare(typeB))
                              .map(([type, count]) => (
                                <div 
                                  key={type} 
                                  className={`px-2 py-1 rounded text-xs 
                                    ${type.toLowerCase().includes('diesel') || type.toLowerCase().includes('kerosene') 
                                      ? 'bg-amber-100 dark:bg-amber-800/40 text-amber-800 dark:text-amber-200' 
                                      : 'bg-blue-100 dark:bg-blue-800/40 text-blue-800 dark:text-blue-200'}`}
                                >
                                  {type}: {count}
                                </div>
                              ))}
                          </div>
                        </div>
                      )}
                      
                      {/* Gas/Diesel totals - secondary info */}
                      <div className="mt-3 grid grid-cols-2 gap-2">
                        <div className="flex items-center space-x-1.5">
                          <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                          <span className="text-sm text-gray-700 dark:text-gray-300">Gas: <b>{data.gas}</b></span>
                        </div>
                        <div className="flex items-center space-x-1.5">
                          <div className="w-3 h-3 rounded-full bg-amber-500"></div>
                          <span className="text-sm text-gray-700 dark:text-gray-300">Diesel: <b>{data.diesel}</b></span>
                        </div>
                      </div>
                      
                      {/* Warning messages */}
                      {hasWarnings && (
                        <div className="mt-3 p-2 bg-amber-50 dark:bg-amber-800/20 rounded border border-amber-200 dark:border-amber-800/40">
                          <p className="text-xs text-amber-800 dark:text-amber-300 font-medium mb-1">Verification required:</p>
                          <ul className="list-disc list-inside text-xs text-amber-700 dark:text-amber-400 space-y-0.5">
                            {data.warnings.map((warning, index) => (
                              <li key={index}>{warning}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
          </div>
        ) : (
          <div className="text-center p-6 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
            <p className="text-gray-500 dark:text-gray-400">No filter requirements found for this time period.</p>
          </div>
        )}
      </div>
    </div>
  );
};
