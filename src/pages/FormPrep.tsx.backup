import React, { useState, useEffect } from 'react';
import { useToast } from '../hooks/useToast';
import { useTheme } from '../hooks/useTheme';
import SingleVisitAutomation from '../components/SingleVisitAutomation';
import BatchVisitAutomation from '../components/BatchVisitAutomation';
import DiagnosticsPanel from '../components/diagnostics';
import { workOrderService } from '../services/workOrderService';
import type { WorkOrder } from '../types/workOrderTypes';

// For compatibility with existing code
const addFormPrepLogDetailed = async (severity: string, message: string, data?: any) => {
  console.log(`[${severity}] ${message}`, data || '');
  return true;
};

const FormPrep: React.FC = () => {
  // Data state
  const [workOrders, setWorkOrders] = useState<WorkOrder[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [debugLogs, setDebugLogs] = useState<Array<{timestamp: string, type: string, message: string, data?: any}>>([]);
  
  // User state
  const [activeUserId, setActiveUserId] = useState<string>('');
  
  // UI state
  const { addToast } = useToast();
  const { isDarkMode } = useTheme();
  
  // Initialize user ID and data
  useEffect(() => {
    // Get user ID from localStorage or generate a random one
    const storedUserId = localStorage.getItem('activeUserId');
    const userId = storedUserId || Math.random().toString(36).substring(2, 15);
    
    if (!storedUserId) {
      localStorage.setItem('activeUserId', userId);
    }
    
    setActiveUserId(userId);
    
    // Load work orders
    loadWorkOrders(userId);
    
    // Log component initialization with debug info
    addDebugLog('SYSTEM', 'FormPrep component initialized', {
      activeUserId: userId,
      storedUserId: storedUserId,
      browserUserAgent: navigator.userAgent
    });
    
    // Also log to console for immediate debugging
    console.log('FormPrep initialized with user ID:', userId);
    console.log('Was user ID in localStorage?', !!storedUserId);
    
    return () => {
      addDebugLog('SYSTEM', 'FormPrep component unmounting');
    };
  }, []);
  
  // Function to load work orders
  const loadWorkOrders = async (userId: string) => {
    setIsLoading(true);
    
    try {
      addDebugLog('INFO', 'Loading work orders...', { userId });
      console.log('Loading work orders for user:', userId);
      
      // Use the workOrderService to get work orders for the active user
      const orders = await workOrderService.getWorkOrders();
      console.log('Raw orders received:', orders);
      
      if (orders.length > 0) {
        // For now, don't filter by user ID since work orders don't have user IDs in the data
        // This was causing all work orders to be filtered out
        console.log(`Found ${orders.length} work orders`);
        
        setWorkOrders(orders);
        addDebugLog('SUCCESS', `Successfully loaded ${orders.length} work orders`);
        addToast('success', `Loaded ${orders.length} work orders`);
      } else {
        // No work orders returned
        setWorkOrders([]);
        addDebugLog('WARNING', 'No work orders found for active user');
        addToast('info', 'No work orders found. You can still use the Single Visit Automation feature.');
      }
    } catch (error) {
      console.error('Error loading work orders:', error);
      addDebugLog('ERROR', 'Failed to load work orders for active user', error);
      
      // Provide a more informative error message
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      addToast('warning', `Couldn't load work orders: ${errorMessage}. You can still use Single Visit Automation.`);
      
      // Set empty work orders to avoid UI issues
      setWorkOrders([]);
    } finally {
      setIsLoading(false);
    }
  };
  
  // Debug logging function
  const addDebugLog = (type: string, message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    const logEntry = {
      timestamp,
      type,
      message,
      data
    };
    
    // Update state with new log entry
    setDebugLogs(prevLogs => {
      const newLogs = [...prevLogs, logEntry];
      // Keep only the last 1000 logs to avoid memory issues
      if (newLogs.length > 1000) {
        return newLogs.slice(newLogs.length - 1000);
      }
      return newLogs;
    });
    
    // Also log to console for immediate visibility
    console.log(`[DEBUG ${type}] ${message}`, data || '');
    
    // Determine severity based on type
    let severity: 'INFO' | 'WARNING' | 'ERROR' | 'DEBUG' | 'SUCCESS' | 'PROGRESS' = 'INFO';
    switch (type.toUpperCase()) {
      case 'ERROR':
        severity = 'ERROR';
        break;
      case 'WARNING':
      case 'WARN':
        severity = 'WARNING';
        break;
      case 'DEBUG':
        severity = 'DEBUG';
        break;
      case 'SUCCESS':
        severity = 'SUCCESS';
        break;
      case 'PROGRESS':
      case 'STATUS':
        severity = 'PROGRESS';
        break;
      default:
        severity = 'INFO';
    }
    
    // Use the enhanced logging function with severity and data
    addFormPrepLogDetailed(severity, message, data).catch(error => {
      console.error('Error adding log entry:', error);
    });
  };
  
  // Handle job status changes for both single and batch automation
  const handleJobStatusChange = (status: any) => {
    console.log('Job status changed:', status);
    // Add any global handling of job status changes here
  };
  
  // Handle job completion for both single and batch automation
  const handleJobComplete = () => {
    console.log('Job completed');
    addToast('success', 'Job completed successfully');
    // Add any global handling of job completion here
  };
  
  // Handle job errors for both single and batch automation
  const handleJobError = (error: any) => {
    console.error('Job error:', error);
    addToast('error', error instanceof Error ? error.message : 'An unknown error occurred');
    // Add any global handling of job errors here
  };
  
  return (
    <div className="container mx-auto bg-gray-100 dark:bg-gray-800 p-4 h-full">
      <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">Form Automation</h1>
      
      {/* Debug information */}
      <div className="mb-4 p-2 bg-gray-100 dark:bg-gray-700 rounded text-sm">
        <p>Active User ID: {activeUserId || 'None'}</p>
        <p>Work Orders Count: {workOrders.length}</p>
        <p>Loading: {isLoading ? 'Yes' : 'No'}</p>
      </div>
      
      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <div className="flex flex-col items-center">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500 mb-4"></div>
            <p className="text-gray-600 dark:text-gray-400">Loading work orders for active user...</p>
          </div>
        </div>
      ) : workOrders.length === 0 ? (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 text-center">
          <p className="text-gray-700 dark:text-gray-300 mb-4">
            No work orders found for the active user. This could be because:
          </p>
          <ul className="text-gray-600 dark:text-gray-400 list-disc list-inside mb-6 text-left max-w-lg mx-auto">
            <li>You haven't scraped any work orders yet</li>
            <li>The work order data file is empty or corrupted</li>
            <li>The server is still initializing</li>
            <li>There are no work orders assigned to you</li>
          </ul>
          <div className="flex flex-col space-y-4">
            <button 
              onClick={() => loadWorkOrders(activeUserId)}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
            >
              Retry Loading Work Orders
            </button>
            
            {/* Add components even without work orders */}
            <div className="mt-6 p-4 bg-gray-50 dark:bg-gray-700/50 rounded-md">
              <h3 className="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">Form Automation Tools</h3>
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                The automation tools are still available even without work orders. You can use the Single Visit Automation to process a specific URL.
              </p>
              
              {/* Single Visit Automation Component */}
              <SingleVisitAutomation
                activeUserId={activeUserId}
                addDebugLog={addDebugLog}
                onJobStatusChange={handleJobStatusChange}
                onJobComplete={handleJobComplete}
                onJobError={handleJobError}
              />
            </div>
          </div>
        </div>
      ) : (
        <div className="space-y-6">
          {/* Single Visit Automation Component */}
          <SingleVisitAutomation
            activeUserId={activeUserId}
            addDebugLog={addDebugLog}
            onJobStatusChange={handleJobStatusChange}
            onJobComplete={handleJobComplete}
            onJobError={handleJobError}
          />
          
          {/* Batch Visit Automation Component */}
          <BatchVisitAutomation
            activeUserId={activeUserId}
            workOrders={workOrders}
            addDebugLog={addDebugLog}
            onJobStatusChange={handleJobStatusChange}
            onJobComplete={handleJobComplete}
            onJobError={handleJobError}
          />
          
          {/* Warning for mock data */}
          {workOrders.some(order => order._isMockData) && (
            <div className="mt-4 p-4 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-md">
              <div className="flex items-start">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-amber-500 mr-2 mt-0.5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
                <div>
                  <h3 className="text-sm font-medium text-amber-800 dark:text-amber-300">Using mock data</h3>
                  <p className="mt-1 text-sm text-amber-700 dark:text-amber-400">
                    Some or all of the displayed work orders are mock data generated for development. 
                    This happens when the app cannot connect to the data source.
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      )}
      
      {/* Diagnostics Panel */}
      <DiagnosticsPanel activeUserId={activeUserId} addDebugLog={addDebugLog} />
    </div>
  );
};

export default FormPrep;